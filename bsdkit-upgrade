#!/bin/sh

set -e -u

: ${BSDKIT_ROOT_URL:="http://hub.olgeni.com/FreeBSD"}
: ${BSDKIT_VERSION:="13.0"}
: ${BSDKIT_ARCH:="amd64"}
: ${DESTDIR:=""}
: ${BOOTENV_ENABLE:="default"}
: ${BOOTENV_NAME:="$(date +%F.%H%M)"}
: ${BOOTENV_MOUNT:="/mnt"}
: ${FETCH_ONLY:="no"}
: ${SKIP_PACKAGES:="no"}
: ${PV_UPDATE_DELAY:="0.1"}

: ${_install_src:="no"}
: ${_install_debug:="no"}
: ${_install_tests:="no"}
: ${_proc_mounted:="no"}

error() {
    echo "bsdkit-upgrade: $@"
    exit 1
}

cleanup() {
    if is_yes ${BOOTENV_ENABLE}; then
        if mount | cut -w -f 3 | fgrep -q "${BOOTENV_MOUNT}/usr/src"; then
            umount -f ${BOOTENV_MOUNT}/usr/src || :
        fi

        if mount | cut -w -f 3 | fgrep -q "${BOOTENV_MOUNT}/usr/ports"; then
            umount -f ${BOOTENV_MOUNT}/usr/ports || :
        fi

        if mount | cut -w -f 3 | fgrep -q "${BOOTENV_MOUNT}/dev"; then
            umount -f ${BOOTENV_MOUNT}/dev || :
        fi

        if mount | cut -w -f 3 | fgrep -q "${BOOTENV_MOUNT}"; then
            umount -f ${BOOTENV_MOUNT} || :
        fi
    else
        if [ -z "${DESTDIR}" ]; then
            if ! mount | cut -w -f 3 | fgrep -q "/proc"; then
                if is_yes ${_proc_mounted}; then
                    mount /proc
                fi
            fi
        fi
    fi
}

is_yes() {
    case $1 in
        [Yy][Ee][Ss])
            return 0
            ;;
        [Nn][Oo])
            return 1
            ;;
        *)
            return 2
            ;;
    esac
}

bsdkit-noauto() {
    _bootfs=$(zpool get -H -p -o value bootfs 2> /dev/null | grep -v "^-")

    if [ $? = 0 ]; then
        _bootenv_base=$(dirname ${_bootfs})

        zfs list -H -o name -r ${_bootenv_base} | fgrep -v "${_bootenv_base}" | while read _fs; do
            echo -n "Checking property 'canmount' on ${_fs}: "

            if [ "$(zfs get -H -o value canmount ${_fs})" != noauto ]; then
                zfs set canmount=noauto ${_fs}
                echo "changed."
            else
                echo "ok."
            fi
        done
    fi
}

osmajor() {
    local _destdir="$1"

    awk '/^\#define[[:blank:]]__FreeBSD_version/ { print substr($3, 1, 2); }' ${_destdir}/usr/include/sys/param.h
}

rebuild_port() {
    local _port="$1"

    if pkg info -q ${_port}; then
        if [ $(osmajor /) = $(osmajor ${BOOTENV_MOUNT}) -a -d ${BOOTENV_MOUNT}/usr/ports/${_port} ]; then
            mount -t devfs devfs ${BOOTENV_MOUNT}/dev

            pkg -c ${BOOTENV_MOUNT} unlock -y ${_port}
            chroot ${BOOTENV_MOUNT} make -C /usr/ports/${_port} clean all deinstall install
            chroot ${BOOTENV_MOUNT} make -C /usr/ports/${_port} clean
            pkg -c ${BOOTENV_MOUNT} lock -y ${_port}

            umount -f ${BOOTENV_MOUNT}/dev
        fi
    fi
}

trap cleanup EXIT

if which -s pv 2> /dev/null; then
    CAT_CMD="pv -i ${PV_UPDATE_DELAY}"
else
    CAT_CMD=/bin/cat
fi

if mount | cut -w -f 3 | fgrep -q "/proc"; then
    _proc_mounted=yes
fi

while getopts "eEn:r:v:a:d:FP" OPT; do
    case ${OPT} in
        e)
            BOOTENV_ENABLE=yes
            ;;
        E)
            BOOTENV_ENABLE=no
            ;;
        n)
            BOOTENV_NAME=${OPTARG}
            ;;
        r)
            BSDKIT_ROOT_URL=${OPTARG}
            ;;
        v)
            BSDKIT_VERSION=${OPTARG}
            ;;
        a)
            BSDKIT_ARCH=${OPTARG}
            ;;
        d)
            DESTDIR=${OPTARG%/}
            ;;
        F)
            FETCH_ONLY="yes"
            ;;
        P)
            SKIP_PACKAGES="yes"
            ;;
        *)
            exit 64 # EX_USAGE
            ;;
    esac
done

shift $((OPTIND - 1))

if kenv -q zfs_be_root > /dev/null 2>&1; then
    if [ ${BOOTENV_ENABLE} = "default" ]; then
        if [ -z "${DESTDIR}" ]; then
            BOOTENV_ENABLE="yes"
        else
            BOOTENV_ENABLE="no"
        fi
    fi
else
    BOOTENV_ENABLE="no"
fi

if ! is_yes ${FETCH_ONLY}; then
    if [ "${DESTDIR}" != "" ] && is_yes ${BOOTENV_ENABLE}; then
        error "incompatible BOOTENV_ENABLE and DESTDIR"
    fi

    if is_yes ${BOOTENV_ENABLE}; then
        which bectl > /dev/null 2>&1 || error "missing requirement: bectl"
    fi
fi

if [ -f ${DESTDIR}/usr/src/Makefile ]; then
    _install_src=yes
fi

_release=${BSDKIT_ROOT_URL}/release-${BSDKIT_VERSION}-${BSDKIT_ARCH}

_distdir=/usr/freebsd-dist/${BSDKIT_VERSION}-${BSDKIT_ARCH}

if [ -f ${DESTDIR}/usr/lib/debug/bin/sh.debug ]; then
    _install_debug=yes
fi

if [ -f ${DESTDIR}/usr/tests/Kyuafile ]; then
    _install_tests=yes
fi

_destdir_fs=$(zfs list -H -o mounted,mountpoint,name | awk "\$1 == \"yes\" && \$2 == \"${DESTDIR}\" { print \$3; }")

if [ -n "${_destdir_fs}" ]; then
    zfs snapshot "${_destdir_fs}@$(date -u "+%Y-%m-%dT%H:%M:%SZ")"
fi

mkdir -p ${_distdir}

cd ${_distdir}

fetch -q ${_release}/MANIFEST

# base-dbg.txz    [sha256]  [size]  base_dbg    "Base system (Debugging)"                     off
# base.txz        [sha256]  [size]  base        "Base system (MANDATORY)"                     on
# doc.txz         [sha256]  [size]  doc         "Additional Documentation"                    off
# kernel-dbg.txz  [sha256]  [size]  kernel_dbg  "Kernel (Debugging)"                          off
# kernel.txz      [sha256]  [size]  kernel      "Kernel (MANDATORY)"                          on
# lib32-dbg.txz   [sha256]  [size]  lib32_dbg   "32-bit compatibility libraries (Debugging)"  off
# lib32.txz       [sha256]  [size]  lib32       "32-bit compatibility libraries"              on
# ports.txz       [sha256]  [size]  ports       "Ports tree"                                  on
# src.txz         [sha256]  [size]  src         "System source tree"                          off
# tests.txz       [sha256]  [size]  tests       "Test suite"                                  off

cat MANIFEST | while read _filename _sha256 _size _package _desc _enable; do
    if ! is_yes ${_install_src} && [ ${_package} = "src" ]; then
        continue
    fi

    if ! is_yes ${_install_debug} && [ ${_package} != "${_package%_dbg}" ]; then
        continue
    fi

    if ! is_yes ${_install_tests} && [ ${_package} = "tests" ]; then
        continue
    fi

    if [ ${_package} = "ports" ]; then
        continue
    fi

    if [ -f "${_filename}" ]; then
        echo "Checking ${_filename}"
        _sha256_local=$(${CAT_CMD} "${_filename}" | sha256 -q)
    else
        _sha256_local="0"
    fi

    while [ "${_sha256}" != "${_sha256_local}" ]; do
        fetch ${_release}/${_filename}
        _sha256_local=$(sha256 -q "${_filename}")
    done
done

if is_yes ${FETCH_ONLY}; then
    exit 0
fi

if is_yes ${BOOTENV_ENABLE}; then
    if mount | cut -w -f 3 | fgrep -q "${BOOTENV_MOUNT}"; then
        error "mount point '${BOOTENV_MOUNT}' already in use"
    fi

    bectl create ${BOOTENV_NAME}
    bectl mount ${BOOTENV_NAME} ${BOOTENV_MOUNT}

    if mount | cut -w -f 3 | fgrep -q "/usr/src"; then
        mount -t nullfs /usr/src ${BOOTENV_MOUNT}/usr/src
    fi

    if mount | cut -w -f 3 | fgrep -q "/usr/ports"; then
        mount -t nullfs /usr/ports ${BOOTENV_MOUNT}/usr/ports
    fi

    DESTDIR=${BOOTENV_MOUNT}
else
    if [ -z "${DESTDIR}" ]; then
        if is_yes ${_proc_mounted}; then
            while umount -f /proc > /dev/null 2>&1; do :; done
        fi
    fi
fi

_srcdir=/usr/src

if [ -f ${DESTDIR}/usr/src/Makefile ]; then
    _srcdir=${DESTDIR}/usr/src
fi

if [ -f ${_srcdir}/Makefile ]; then
    etcupdate resolve -s ${_srcdir} -D ${DESTDIR}/
fi

export PATH=/rescue:${PATH}

if is_yes ${_install_src}; then
    echo "Extracting: src.txz"

    for _file in ${DESTDIR}/usr/src/*; do
        rm -r -f ${_file}
    done

    ${CAT_CMD} ${_distdir}/src.txz | tar -x -z -U -C ${DESTDIR}/ -f -
fi

find ${DESTDIR}/bin \
    ${DESTDIR}/lib \
    ${DESTDIR}/libexec \
    ${DESTDIR}/sbin \
    ${DESTDIR}/usr/bin \
    ${DESTDIR}/usr/lib \
    ${DESTDIR}/usr/lib32 \
    -flags -schg \
    -exec chflags noschg {} \;

if [ -f ${_srcdir}/Makefile ]; then
    etcupdate -p -s ${_srcdir} -D ${DESTDIR}/
fi

cat MANIFEST | while read _filename _sha256 _size _package _desc _enable; do
    _extract="no"
    _options=""

    if ! is_yes ${_install_debug} && [ ${_package} != ${_package%_dbg} ]; then
        continue
    fi

    if ! is_yes ${_install_tests} && [ ${_package} = "tests" ]; then
        continue
    fi

    case ${_package} in
        kernel*)
            if [ -f "${DESTDIR}/boot/kernel/kernel" ]; then
                _extract="yes"
            fi
            ;;
        base)
            _options="${_options} --exclude ./.cshrc"
            _options="${_options} --exclude ./.profile"
            _options="${_options} --exclude ./etc"
            _options="${_options} --exclude ./root"
            _options="${_options} --exclude ./tmp"
            _options="${_options} --exclude ./var"
            _extract="yes"
            ;;
        ports) ;;

        src) ;;

        *)
            _extract="yes"
            ;;
    esac

    if is_yes ${_extract}; then
        echo "Extracting: ${_filename}"
        ${CAT_CMD} ${_distdir}/${_filename} | tar -x -z -U -C ${DESTDIR}/ -f - ${_options}
    fi
done

if [ -f ${_srcdir}/Makefile ]; then
    echo "Running: etcupdate"
    etcupdate -F -I '*.cf' -s ${_srcdir} -D ${DESTDIR}/
    etcupdate resolve -s ${_srcdir} -D ${DESTDIR}/
fi

echo "Running: mtree"

mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.root.dist -p ${DESTDIR}/
mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.usr.dist -p ${DESTDIR}/usr

if is_yes ${BOOTENV_ENABLE}; then
    mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.var.dist -p /var
else
    mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.var.dist -p ${DESTDIR}/var
fi

if [ -f ${DESTDIR}/etc/mtree/BSD.lib32.dist ]; then
    if [ -d ${DESTDIR}/usr/lib32 ]; then
        mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.lib32.dist -p ${DESTDIR}/usr
    fi
fi

if [ -f ${DESTDIR}/etc/mtree/BSD.include.dist ]; then
    mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.include.dist -p ${DESTDIR}/usr/include
fi

if [ -f ${DESTDIR}/etc/mtree/BSD.sendmail.dist ]; then
    mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.sendmail.dist -p ${DESTDIR}/
fi

if [ -f ${DESTDIR}/etc/mtree/BSD.tests.dist ]; then
    mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.tests.dist -p ${DESTDIR}/usr/tests
fi

chroot ${DESTDIR}/ newaliases

if [ -f ${_srcdir}/Makefile ]; then
    cd ${_srcdir}

    echo "Running: delete-old"
    yes y | make delete-old DESTDIR=${DESTDIR}/ > /dev/null 2>&1

    # echo "Running: delete-old-libs"
    # yes y | make delete-old-libs DESTDIR=${DESTDIR}/ > /dev/null 2>&1
fi

if is_yes ${BOOTENV_ENABLE}; then
    if ! is_yes ${SKIP_PACKAGES}; then
        mount -t devfs devfs ${BOOTENV_MOUNT}/dev
        if pkg -c ${BOOTENV_MOUNT} update -f; then
            pkg -c ${BOOTENV_MOUNT} upgrade -Fy
            env HANDLE_RC_SCRIPTS=NO pkg -c ${BOOTENV_MOUNT} upgrade -y
        fi
        umount -f ${BOOTENV_MOUNT}/dev
    fi

    for _port in $(pkg which -qo /boot/modules/* | sort | uniq); do
        rebuild_port ${_port}
    done

    if mount | cut -w -f 3 | fgrep -q "${BOOTENV_MOUNT}/usr/src"; then
        umount -f ${BOOTENV_MOUNT}/usr/src
    fi

    if mount | cut -w -f 3 | fgrep -q "${BOOTENV_MOUNT}/usr/ports"; then
        umount -f ${BOOTENV_MOUNT}/usr/ports
    fi

    bectl umount -f ${BOOTENV_NAME}
    bectl activate ${BOOTENV_NAME}

    bsdkit-noauto

    bectl list
fi

echo "Upgrade complete."

# gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada0
# gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada1

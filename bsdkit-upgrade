#!/bin/sh

set -e -u

: ${BSDKIT_ROOT_URL:=http://olgeni.olgeni.com/FreeBSD}
: ${BSDKIT_VERSION:=11.0}
: ${BSDKIT_ARCH:=amd64}
: ${DESTDIR:=}

while getopts "r:v:a:d:" OPT; do
    case $OPT in
        r)
            BSDKIT_ROOT_URL=${OPTARG}
            ;;
        v)
            BSDKIT_VERSION=${OPTARG}
            ;;
        a)
            BSDKIT_ARCH=${OPTARG}
            ;;
        d)
            DESTDIR=${OPTARG%/}
            ;;
        *)
            exit 64 # EX_USAGE
    esac
done

shift $((${OPTIND} - 1))

_srcdir=/usr/src

if [ -d ${DESTDIR}/usr/src ]; then
    _srcdir=${DESTDIR}/usr/src
fi

if [ -f ${_srcdir}/Makefile ]; then
    etcupdate resolve -s ${_srcdir} -D ${DESTDIR}/
fi

_release=${BSDKIT_ROOT_URL}/release-${BSDKIT_VERSION}-${BSDKIT_ARCH}

_distdir=/usr/freebsd-dist/${BSDKIT_VERSION}-${BSDKIT_ARCH}

mkdir -p ${_distdir}

cd ${_distdir}

fetch ${_release}/MANIFEST

cat MANIFEST | while read _filename _sha256 _size _package; do
    if [ -f "${_filename}" ]; then
        echo "Checking ${_filename}"
        _sha256_local=$(sha256 -q "${_filename}")
    else
        _sha256_local="0"
    fi

    while [ "${_sha256}" != "${_sha256_local}" ]; do
        fetch ${_release}/${_filename}
        _sha256_local=$(sha256 -q "${_filename}")
    done
done

export PATH=/rescue:${PATH}

if [ -f ${DESTDIR}/usr/src/Makefile -a ! -d ${DESTDIR}/usr/src/.svn ]; then
    echo "Extracting: src.txz"

    for _file in ${DESTDIR}/usr/src/*; do
        rm -r -f  ${_file}
    done

    tar -x -z -U -f ${_distdir}/src.txz -C ${DESTDIR}/
fi

find ${DESTDIR}/bin       \
     ${DESTDIR}/lib       \
     ${DESTDIR}/libexec   \
     ${DESTDIR}/sbin      \
     ${DESTDIR}/usr/bin   \
     ${DESTDIR}/usr/lib   \
     ${DESTDIR}/usr/lib32 \
     -flags -schg         \
     -exec chflags noschg {} \;

if [ -f ${_srcdir}/Makefile ]; then
    etcupdate -p -s ${_srcdir} -D ${DESTDIR}/
fi

cat MANIFEST | while read _file _sha256 _size _package _desc _enable; do
    _extract=""
    _options=""

    case ${_file} in
        kernel*)
            if [ -f "${DESTDIR}/boot/kernel/kernel" ]; then
                _extract="YES"
            fi
            ;;
        base.txz)
            _options="${_options} --exclude ./.cshrc"
            _options="${_options} --exclude ./.profile"
            _options="${_options} --exclude ./dev"
            _options="${_options} --exclude ./etc"
            _options="${_options} --exclude ./media"
            _options="${_options} --exclude ./mnt"
            _options="${_options} --exclude ./proc"
            _options="${_options} --exclude ./root"
            _options="${_options} --exclude ./tmp"
            _options="${_options} --exclude ./var"
            ;;
        *)
            _extract="YES"
    esac

    if [ -n "${_extract}" ]; then
        echo "Extracting: ${_file}"
        tar -x -z -U -f ${_distdir}/${_file} -C ${DESTDIR}/ ${_options}
    else
        echo "Skipping: ${_file}"
    fi
done

echo "Running: mtree"

mtree -ideU -f /etc/mtree/BSD.root.dist -p ${DESTDIR}/
mtree -ideU -f /etc/mtree/BSD.var.dist  -p ${DESTDIR}/var
mtree -ideU -f /etc/mtree/BSD.usr.dist  -p ${DESTDIR}/usr

if [ -f ${_srcdir}/Makefile ]; then
    echo "Running: etcupdate"
    etcupdate -F -I '*.cf' -s ${_srcdir} -D ${DESTDIR}/
fi

etcupdate resolve -s ${_srcdir} -D ${DESTDIR}/

chroot ${DESTDIR}/ newaliases

if [ -f ${_srcdir}/Makefile ]; then
    cd ${_srcdir}

    echo "Running: delete-old"
    yes y | make delete-old DESTDIR=${DESTDIR}/ > /dev/null 2>&1

    # echo "Running: delete-old-libs"
    # yes y | make delete-old-libs DESTDIR=${DESTDIR}/ > /dev/null 2>&1
fi

# gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada0
# gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada1

#!/bin/sh

set -e -u

: ${BSDKIT_ROOT_URL:="http://olgeni.olgeni.com/FreeBSD"}
: ${BSDKIT_VERSION:="11.0"}
: ${BSDKIT_ARCH:="amd64"}
: ${DESTDIR:=""}
: ${BOOTENV_ENABLE:="default"}
: ${BOOTENV_NAME:="$(date +%F)"}
: ${BOOTENV_MOUNT:="/mnt"}
: ${FETCH_ONLY:="no"}
: ${SKIP_PACKAGES:="no"}

: ${_install_src:="no"}
: ${_install_debug:="no"}
: ${_install_tests:="no"}

error()
{
    echo "bsdkit-upgrade: $@"
    exit 1
}

is_yes()
{
    case $1 in
        [Yy][Ee][Ss])
            return 0
            ;;
        [Nn][Oo])
            return 1
            ;;
        *)
            return 2
    esac
}

bsdkit-noauto()
{
    _bootfs=$(zpool get -H -p -o value bootfs 2>/dev/null | grep -v "^-")

    if [ $? = 0 ]; then
        _bootenv_base=$(dirname ${_bootfs})

        zfs list -H -o name -r ${_bootenv_base} \
            | grep -v "^${_bootenv_base}$" \
            | while read _fs; do

            echo -n "Checking property 'canmount' on ${_fs}: "

            if [ "$(zfs get -H -o value canmount ${_fs})" != noauto ]; then
                zfs set canmount=noauto ${_fs}
                echo "changed."
            else
                echo "ok."
            fi
        done
    fi
}

while getopts "eEn:r:v:a:d:FP" OPT; do
    case ${OPT} in
        e)
            BOOTENV_ENABLE=yes
            ;;
        E)
            BOOTENV_ENABLE=no
            ;;
        n)
            BOOTENV_NAME=${OPTARG}
            ;;
        r)
            BSDKIT_ROOT_URL=${OPTARG}
            ;;
        v)
            BSDKIT_VERSION=${OPTARG}
            ;;
        a)
            BSDKIT_ARCH=${OPTARG}
            ;;
        d)
            DESTDIR=${OPTARG%/}
            ;;
        F)
            FETCH_ONLY="yes"
            ;;
        P)
            SKIP_PACKAGES="yes"
            ;;
        *)
            exit 64 # EX_USAGE
    esac
done

shift $((${OPTIND} - 1))

if kenv -q zfs_be_root >/dev/null 2>&1; then
    if [ ${BOOTENV_ENABLE} = "default" ]; then
        if [ -z "${DESTDIR}" ]; then
            BOOTENV_ENABLE="yes"
        else
            BOOTENV_ENABLE="no"
        fi
    fi
else
    BOOTENV_ENABLE="no"
fi

if ! is_yes ${FETCH_ONLY}; then
    if [ "${DESTDIR}" != "" ] && is_yes ${BOOTENV_ENABLE}; then
        error "incompatible BOOTENV_ENABLE and DESTDIR"
    fi

    if is_yes ${BOOTENV_ENABLE}; then
        which beadm >/dev/null 2>&1 || error "missing requirement: beadm"
    fi
fi

if [ -f ${DESTDIR}/usr/src/Makefile -a ! -d ${DESTDIR}/usr/src/.svn ]; then
    _install_src=yes
fi

_release=${BSDKIT_ROOT_URL}/release-${BSDKIT_VERSION}-${BSDKIT_ARCH}

_distdir=/usr/freebsd-dist/${BSDKIT_VERSION}-${BSDKIT_ARCH}

if [ -f ${DESTDIR}/usr/lib/debug/bin/sh.debug ]; then
    _install_debug=yes
fi

if [ -f ${DESTDIR}/usr/tests/Kyuafile ]; then
    _install_tests=yes
fi

_destdir_fs=$(zfs list -H -o mounted,mountpoint,name | awk "\$1 == \"yes\" && \$2 == \"${DESTDIR}\" { print \$3; }")

if [ -n "${_destdir_fs}" ]; then
    zfs snapshot "${_destdir_fs}@$(date -u "+%Y-%m-%dT%H:%M:%SZ")"
fi

mkdir -p ${_distdir}

cd ${_distdir}

fetch ${_release}/MANIFEST

cat MANIFEST | while read _filename _sha256 _size _package _desc _enable; do
    if ! is_yes ${_install_src} && [ ${_package} = "src" ]; then
        continue
    fi

    if ! is_yes ${_install_debug} && [ ${_package} != "${_package%_dbg}" ]; then
        continue
    fi

    if ! is_yes ${_install_tests} && [ ${_package} = "tests" ]; then
        continue
    fi

    if [ -f "${_filename}" ]; then
        echo "Checking ${_filename}"
        _sha256_local=$(sha256 -q "${_filename}")
    else
        _sha256_local="0"
    fi

    while [ "${_sha256}" != "${_sha256_local}" ]; do
        fetch ${_release}/${_filename}
        _sha256_local=$(sha256 -q "${_filename}")
    done
done

if is_yes ${FETCH_ONLY}; then
    exit 0
fi

if is_yes ${BOOTENV_ENABLE}; then
    if mount | cut -w -f 3 | grep -q "^${BOOTENV_MOUNT}\$"; then
        error "mount point '${BOOTENV_MOUNT}' already in use"
    fi

    beadm create ${BOOTENV_NAME}
    beadm mount ${BOOTENV_NAME} ${BOOTENV_MOUNT}

    if mount | cut -w -f 3 | grep -q "^/usr/src\$"; then
        mount -t nullfs /usr/src ${BOOTENV_MOUNT}/usr/src
    fi

    if mount | cut -w -f 3 | grep -q "^/usr/ports\$"; then
        mount -t nullfs /usr/ports ${BOOTENV_MOUNT}/usr/ports
    fi

    DESTDIR=${BOOTENV_MOUNT}
fi

_srcdir=/usr/src

if [ -f ${DESTDIR}/usr/src/Makefile ]; then
    _srcdir=${DESTDIR}/usr/src
fi

if [ -f ${_srcdir}/Makefile ]; then
    etcupdate resolve -s ${_srcdir} -D ${DESTDIR}/
fi

export PATH=/rescue:${PATH}

if is_yes ${_install_src}; then
    echo "Extracting: src.txz"

    for _file in ${DESTDIR}/usr/src/*; do
        rm -r -f  ${_file}
    done

    tar -x -z -U -f ${_distdir}/src.txz -C ${DESTDIR}/
fi

find ${DESTDIR}/bin       \
     ${DESTDIR}/lib       \
     ${DESTDIR}/libexec   \
     ${DESTDIR}/sbin      \
     ${DESTDIR}/usr/bin   \
     ${DESTDIR}/usr/lib   \
     ${DESTDIR}/usr/lib32 \
     -flags -schg         \
     -exec chflags noschg {} \;

if [ -f ${_srcdir}/Makefile ]; then
    etcupdate -p -s ${_srcdir} -D ${DESTDIR}/
fi

cat MANIFEST | while read _file _sha256 _size _package _desc _enable; do
    _extract="no"
    _options=""

    if ! is_yes ${_install_debug} && [ ${_package} != ${_package%_dbg} ]; then
        continue
    fi

    if ! is_yes ${_install_tests} && [ ${_package} = "tests" ]; then
        continue
    fi

    case ${_file} in
        kernel*)
            if [ -f "${DESTDIR}/boot/kernel/kernel" ]; then
                _extract="yes"
            fi
            ;;
        base.txz)
            _options="${_options} --exclude ./.cshrc"
            _options="${_options} --exclude ./.profile"
            _options="${_options} --exclude ./etc"
            _options="${_options} --exclude ./root"
            _options="${_options} --exclude ./tmp"
            _options="${_options} --exclude ./var"
            _extract="yes"
            ;;
        src*)
            ;;
        *)
            _extract="yes"
    esac

    if is_yes ${_extract}; then
        echo "Extracting: ${_file}"
        tar -x -z -U -f ${_distdir}/${_file} -C ${DESTDIR}/ ${_options}
    fi
done

if [ -f ${_srcdir}/Makefile ]; then
    echo "Running: etcupdate"
    etcupdate -F -I '*.cf' -s ${_srcdir} -D ${DESTDIR}/
    etcupdate resolve -s ${_srcdir} -D ${DESTDIR}/
fi

echo "Running: mtree"

mtree -ideU -f ${DESTDIR}/etc/mtree/BSD.root.dist -p ${DESTDIR}/
mtree -ideU -f ${DESTDIR}/etc/mtree/BSD.var.dist  -p ${DESTDIR}/var
mtree -ideU -f ${DESTDIR}/etc/mtree/BSD.usr.dist  -p ${DESTDIR}/usr

if [ -f ${DESTDIR}/etc/mtree/BSD.include.dist ]; then
    mtree -ideU -f ${DESTDIR}/etc/mtree/BSD.include.dist -p ${DESTDIR}/usr/include
fi

if [ -f ${DESTDIR}/etc/mtree/BSD.sendmail.dist ]; then
    mtree -ideU -f ${DESTDIR}/etc/mtree/BSD.sendmail.dist -p ${DESTDIR}/
fi

if [ -f ${DESTDIR}/etc/mtree/BSD.tests.dist ]; then
    mtree -ideU -f ${DESTDIR}/etc/mtree/BSD.tests.dist -p ${DESTDIR}/usr/tests
fi

chroot ${DESTDIR}/ newaliases

if [ -f ${_srcdir}/Makefile ]; then
    cd ${_srcdir}

    echo "Running: delete-old"
    yes y | make delete-old DESTDIR=${DESTDIR}/ > /dev/null 2>&1

    # echo "Running: delete-old-libs"
    # yes y | make delete-old-libs DESTDIR=${DESTDIR}/ > /dev/null 2>&1
fi

rebuild_port()
{
    local _port="$1"

    if pkg-static info -q ${_port}; then
        if [ -d ${BOOTENV_MOUNT}/usr/ports/${_port} ]; then
            mount -t devfs devfs ${BOOTENV_MOUNT}/dev

            pkg-static -c ${BOOTENV_MOUNT} unlock -y ${_port}
            chroot ${BOOTENV_MOUNT} make -C /usr/ports/${_port} clean all deinstall install
            chroot ${BOOTENV_MOUNT} make -C /usr/ports/${_port} clean
            pkg-static -c ${BOOTENV_MOUNT} lock -y ${_port}

            umount ${BOOTENV_MOUNT}/dev
        fi
    fi
}

if is_yes ${BOOTENV_ENABLE}; then
    if ! is_yes ${SKIP_PACKAGES}; then
        if pkg-static -c ${BOOTENV_MOUNT} update -f; then
            pkg-static -c ${BOOTENV_MOUNT} upgrade -Fy
            pkg-static -c ${BOOTENV_MOUNT} upgrade -y
        fi
    fi

    for _port in $(pkg which -qo /boot/modules/* | sort | uniq); do
        rebuild_port ${_port}
    done

    if mount | cut -w -f 3 | grep -q "^${BOOTENV_MOUNT}/usr/src\$"; then
        umount -f ${BOOTENV_MOUNT}/usr/src
    fi

    if mount | cut -w -f 3 | grep -q "^${BOOTENV_MOUNT}/usr/ports\$"; then
        umount -f ${BOOTENV_MOUNT}/usr/ports
    fi

    beadm umount -f ${BOOTENV_NAME}
    beadm activate ${BOOTENV_NAME}

    bsdkit-noauto
fi

# gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada0
# gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada1

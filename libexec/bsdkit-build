#!/usr/bin/env zsh

setopt errreturn nounset pipefail

SCRIPT_PATH="$(dirname $(realpath $0))"
SCRIPT_NAME="$(basename $0)"

source ${SCRIPT_PATH}/../lib/system.inc.sh
source ${SCRIPT_PATH}/../lib/colors.inc.sh
source ${SCRIPT_PATH}/../lib/hr-to-bytes.inc.sh
source ${SCRIPT_PATH}/../lib/is-yes.inc.sh
source ${SCRIPT_PATH}/../lib/yaml.inc.sh

if [ "$(uname -s)" != "FreeBSD" ]; then
    error "Must be executed on FreeBSD."
    exit 1
fi

BSDKIT_PATH="$(realpath ${SCRIPT_PATH}/../)"

if [ -x /usr/local/bin/vim ]; then
    export EDITOR=/usr/local/bin/vim
fi

# ===========================================================================

DEFAULT_VERSION=14
DEFAULT_ARCH=amd64

unset POSIXLY_CORRECT

if [ $(whoami) != "root" ]; then
    error "Must be executed as root."
    exit 1
fi

if [ $# -eq 0 ]; then
    cat << EOF

usage: ${SCRIPT_NAME} [option] ...

Options and arguments:

    -v version
    -a arch
    -j jobs
    -P: build images with packages
    -R: build release
    -S: build staging
    -I: build ISO image
    -U: build USB image
    -A: build release/staging/ISO/USB

EOF
fi

_version=${DEFAULT_VERSION}
_arch=${DEFAULT_ARCH}
_jobs_option=""
_with_packages=""

_build_release=""
_build_staging=""
_build_iso=""
_build_usb=""

OPTIND=1
while getopts "v:a:j:PRSIUA" OPT; do
    case ${OPT} in
        v)
            _version="${OPTARG}"
            ;;
        a)
            _arch="${OPTARG}"
            ;;
        j)
            _jobs_option="-j${OPTARG}"
            ;;
        P)
            _with_packages="YES"
            ;;
        R)
            _build_release="YES"
            ;;
        S)
            _build_staging="YES"
            ;;
        I)
            _build_iso="YES"
            ;;
        U)
            _build_usb="YES"
            ;;
        A)
            _build_release="YES"
            _build_staging="YES"
            _build_iso="YES"
            _build_usb="YES"
            ;;
        *) ;;
    esac
done

shift $((OPTIND - 1))

# ===

OS_SRCDIR=${BSDKIT_DATA}/src/${_version}/src

if [ ! -d "${OS_SRCDIR}" ]; then
    error "Source directory not found: ${OS_SRCDIR}"
    exit 1
fi

OS_RELDIR=${BSDKIT_DATA}/src/${_version}/release-${_arch}
OS_REPODIR=${BSDKIT_DATA}/pkgbase

OS_MAJOR=$(get-src-major-version ${OS_SRCDIR})
OS_MINOR=$(get-src-minor-version ${OS_SRCDIR})
OS_PATCH=$(get-src-patch-version ${OS_SRCDIR})

# ===

build-release() {
    local _make_conf=${BSDKIT_PATH}/etc/make.conf
    local _src_conf=${BSDKIT_PATH}/etc/src.conf

    install -o root -g wheel -m 644 ansible/BSDKIT-${_version}-${_arch} ${OS_SRCDIR}/sys/${_arch}/conf/BSDKIT

    KERNCONF="BSDKIT"

    message ">>> Start of build: $(date "+%Y-%m-%d %H:%M:%S")"

    env -i make -s -C ${OS_SRCDIR} \
        __MAKE_CONF=${_make_conf} SRCCONF=${_src_conf} TARGET=${_arch} TARGET_ARCH=${_arch} KERNCONF="${KERNCONF}" \
        ${_jobs_option} buildworld buildkernel

    env -i make -s -C ${OS_SRCDIR}/release \
        __MAKE_CONF=${_make_conf} SRCCONF=${_src_conf} TARGET=${_arch} TARGET_ARCH=${_arch} KERNCONF="${KERNCONF}" \
        release NOPORTS="YES"

    rm -r -f ${OS_RELDIR}
    mkdir -p ${OS_RELDIR}

    env -i make -s -C ${OS_SRCDIR} \
        __MAKE_CONF=${_make_conf} SRCCONF=${_src_conf} TARGET=${_arch} TARGET_ARCH=${_arch} KERNCONF="${KERNCONF}" \
        ${_jobs_option} packages REPODIR=${OS_REPODIR}

    env -i make -s -C ${OS_SRCDIR}/release \
        __MAKE_CONF=${_make_conf} SRCCONF=${_src_conf} TARGET=${_arch} TARGET_ARCH=${_arch} KERNCONF="${KERNCONF}" \
        install DESTDIR=${OS_RELDIR}

    get-src-osrelease ${OS_SRCDIR} > ${OS_RELDIR}/ftp/RELEASE

    etcupdate build -s ${OS_SRCDIR} ${OS_RELDIR}/ftp/etcupdate.tar.bz2

    echo -n > ${OS_RELDIR}/ftp/OLDFILES

    env -i make -s -C ${OS_SRCDIR} list-old-files | sed 's/^/old-files: /' >> ${OS_RELDIR}/ftp/OLDFILES
    env -i make -s -C ${OS_SRCDIR} list-old-dirs | sed 's/^/old-dirs: /' >> ${OS_RELDIR}/ftp/OLDFILES
    env -i make -s -C ${OS_SRCDIR} list-old-libs | sed 's/^/old-libs: /' >> ${OS_RELDIR}/ftp/OLDFILES

    env -i make -s -C ${OS_SRCDIR}/release \
        __MAKE_CONF=${_make_conf} SRCCONF=${_src_conf} TARGET=${_arch} TARGET_ARCH=${_arch} KERNCONF="${KERNCONF}" \
        clean

    message ">>> End of build: $(date "+%Y-%m-%d %H:%M:%S")"

    rm -f ${OS_SRCDIR}/sys/${_arch}/conf/BSDKIT
}

build-staging() {
    local _target=${BSDKIT_DATA}/release-${_version}-${_arch}

    if [ -d "${OS_RELDIR}/ftp" ]; then
        if [ -d "${_target}" ]; then
            rm -r -f ${_target}
        fi

        mkdir -p ${_target}
        cp ${OS_RELDIR}/ftp/* ${_target}
    fi

    ${BSDKIT_PATH}/bsdkit build-setup-staging \
        ${BSDKIT_DATA}/staging-${_version}-${_arch} \
        . \
        ${BSDKIT_DATA}/release-${_version}-${_arch} \
        ${BSDKIT_DATA}/packages-FreeBSD:${OS_MAJOR}:${_arch}-default-nox11
}

build-iso() {
    local _iso=${BSDKIT_DATA}/iso/release-${_version}-${_arch}.iso
    local _release="none"
    local _packages="none"

    if [ -n "${_with_packages}" ]; then
        _iso=${BSDKIT_DATA}/iso/release-${_version}-${_arch}.full.iso
        _release=${BSDKIT_DATA}/release-${_version}-${_arch}
        _packages=${BSDKIT_DATA}/packages-FreeBSD:${OS_MAJOR}:${_arch}-default-nox11
    fi

    ${BSDKIT_PATH}/bsdkit build-setup-iso \
        ${_iso} \
        ${BSDKIT_DATA}/staging-${_version}-${_arch} \
        ${_release} \
        ${_packages}
}

build-usb() {
    local _iso=${BSDKIT_DATA}/iso/release-${_version}-${_arch}.iso
    local _usb=${BSDKIT_DATA}/iso/release-${_version}-${_arch}.img

    if [ -n "${_with_packages}" ]; then
        _iso=${BSDKIT_DATA}/iso/release-${_version}-${_arch}.full.iso
        _usb=${BSDKIT_DATA}/iso/release-${_version}-${_arch}.full.img
    fi

    ${BSDKIT_PATH}/bsdkit build-setup-img ${_iso} ${_usb}
}

if [ -n "${_build_release}" ]; then
    build-release
fi

if [ -n "${_build_staging}" ]; then
    build-staging
fi

if [ -n "${_build_iso}" ]; then
    build-iso
fi

if [ -n "${_build_usb}" ]; then
    build-usb
fi

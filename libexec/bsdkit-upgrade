#!/usr/bin/env zsh

set -e -u -o pipefail

SCRIPT_PATH="$(dirname $(realpath $0))"
SCRIPT_NAME="$(basename $0)"

message() {
    echo "[${SCRIPT_NAME}] $*"
}

error() {
    echo "[${SCRIPT_NAME}] $*" >&2
    exit 1
}

autoload throw catch

: ${BSDKIT_ROOT_URL:="http://hub.olgeni.com/FreeBSD"}
: ${BSDKIT_VERSION:=""}
: ${BSDKIT_ARCH:="amd64"}
: ${DESTDIR:=""}
: ${BOOTENV_ENABLE:="default"}
: ${BOOTENV_NAME:="$(date +%F.%H%M)"}
: ${BOOTENV_MOUNT:="/mnt"}
: ${FETCH_ONLY:="no"}
: ${UPGRADE_PACKAGES:="no"}
: ${REBUILD_PORTS:="no"}
: ${PV_UPDATE_DELAY:="0.1"}

: ${_install_src:="no"}
: ${_install_debug:="no"}
: ${_install_tests:="no"}
: ${_proc_mounted:="no"}

get_current_version() {
    local _version="$(uname -r | cut -d '-' -f 1)"
    echo "${_version}"
}

cleanup() {
    if is_yes ${BOOTENV_ENABLE}; then
        if mount | cut -w -f 3 | fgrep -q "${BOOTENV_MOUNT}/usr/src"; then
            umount -f ${BOOTENV_MOUNT}/usr/src || :
        fi

        if mount | cut -w -f 3 | fgrep -q "${BOOTENV_MOUNT}/usr/ports"; then
            umount -f ${BOOTENV_MOUNT}/usr/ports || :
        fi

        if mount | cut -w -f 3 | fgrep -q "${BOOTENV_MOUNT}/dev"; then
            umount -f ${BOOTENV_MOUNT}/dev || :
        fi

        if mount | cut -w -f 3 | fgrep -q "${BOOTENV_MOUNT}"; then
            umount -f ${BOOTENV_MOUNT} || :
        fi
    else
        if [ -z "${DESTDIR}" ]; then
            if ! mount | cut -w -f 3 | fgrep -q "/proc"; then
                if is_yes ${_proc_mounted}; then
                    mount /proc
                fi
            fi
        fi
    fi
}

is_yes() {
    # Return 0 if the argument is a positive answer, 1 if it is a negative
    case $1 in
        [Yy][Ee][Ss])
            return 0
            ;;
        [Nn][Oo])
            return 1
            ;;
        [Tt][Rr][Uu][Ee])
            return 0
            ;;
        [Ff][Aa][Ll][Ss][Ee])
            return 1
            ;;
        [Oo][Nn])
            return 0
            ;;
        [Oo][Ff][Ff])
            return 1
            ;;
        *)
            if [[ $1 == <-> ]]; then
                [ $1 -ne 0 ]
            else
                return 2
            fi
            ;;
    esac
}

osmajor() {
    local _destdir="$1"

    awk '/^\#define[[:blank:]]__FreeBSD_version/ { print substr($3, 1, 2); }' ${_destdir}/usr/include/sys/param.h
}

rebuild_port() {
    local _port="$1"

    if ! pkg info -q ${_port}; then
        return 0
    fi

    if ! [ $(osmajor /) = $(osmajor ${BOOTENV_MOUNT}) -a -d ${BOOTENV_MOUNT}/usr/ports/${_port} ]; then
        return 0
    fi

    mount -t devfs devfs ${BOOTENV_MOUNT}/dev

    pkg -c ${BOOTENV_MOUNT} unlock -y ${_port}
    chroot ${BOOTENV_MOUNT} make -C /usr/ports/${_port} clean all deinstall install
    chroot ${BOOTENV_MOUNT} make -C /usr/ports/${_port} clean
    pkg -c ${BOOTENV_MOUNT} lock -y ${_port}

    umount -f ${BOOTENV_MOUNT}/dev
}

trap cleanup EXIT

if which -s pv > /dev/null 2>&1; then
    CAT_CMD="pv -i ${PV_UPDATE_DELAY}"
else
    CAT_CMD="/bin/cat"
fi

if mount | cut -w -f 3 | fgrep -q "/proc"; then
    _proc_mounted=yes
fi

OPTIND=1
while getopts "eEn:r:v:a:d:Fpb" OPT; do
    case ${OPT} in
        e)
            BOOTENV_ENABLE=yes
            ;;
        E)
            BOOTENV_ENABLE=no
            ;;
        n)
            BOOTENV_NAME=${OPTARG}
            ;;
        r)
            BSDKIT_ROOT_URL=${OPTARG}
            ;;
        v)
            BSDKIT_VERSION=${OPTARG}
            ;;
        a)
            BSDKIT_ARCH=${OPTARG}
            ;;
        d)
            DESTDIR=${OPTARG%/}
            ;;
        F)
            FETCH_ONLY="yes"
            ;;
        p)
            UPGRADE_PACKAGES="yes"
            ;;
        b)
            REBUILD_PORTS="yes"
            ;;
        *)
            exit 64 # EX_USAGE
            ;;
    esac
done

shift $((OPTIND - 1))

if [ -z "${BSDKIT_VERSION}" ]; then
    BSDKIT_VERSION="$(get_current_version)"
    message "Using current version: ${BSDKIT_VERSION}"
fi

if kenv -q zfs_be_root > /dev/null 2>&1; then
    if [ ${BOOTENV_ENABLE} = "default" ]; then
        if [ -z "${DESTDIR}" ]; then
            BOOTENV_ENABLE="yes"
        else
            BOOTENV_ENABLE="no"
        fi
    fi
else
    BOOTENV_ENABLE="no"
fi

if ! is_yes ${FETCH_ONLY}; then
    if [ "${DESTDIR}" != "" ] && is_yes ${BOOTENV_ENABLE}; then
        error "incompatible BOOTENV_ENABLE and DESTDIR"
    fi

    if is_yes ${BOOTENV_ENABLE}; then
        which bectl > /dev/null 2>&1 || error "missing requirement: bectl"
    fi
fi

if [ -f ${DESTDIR}/usr/src/Makefile ]; then
    _install_src=yes
fi

if [ -f ${DESTDIR}/usr/lib/debug/bin/sh.debug ]; then
    _install_debug=yes
fi

if [ -f ${DESTDIR}/usr/tests/Kyuafile ]; then
    _install_tests=yes
fi

_release=${BSDKIT_ROOT_URL}/release-${BSDKIT_VERSION}-${BSDKIT_ARCH}

_distdir=/usr/freebsd-dist/${BSDKIT_VERSION}-${BSDKIT_ARCH}

mkdir -p ${_distdir}

cd ${_distdir}

fetch -q ${_release}/MANIFEST 2>&1

# base-dbg.txz    [sha256]  [size]  base_dbg    "Base system (Debugging)"                     off
# base.txz        [sha256]  [size]  base        "Base system (MANDATORY)"                     on
# doc.txz         [sha256]  [size]  doc         "Additional Documentation"                    off
# kernel-dbg.txz  [sha256]  [size]  kernel_dbg  "Kernel (Debugging)"                          off
# kernel.txz      [sha256]  [size]  kernel      "Kernel (MANDATORY)"                          on
# lib32-dbg.txz   [sha256]  [size]  lib32_dbg   "32-bit compatibility libraries (Debugging)"  off
# lib32.txz       [sha256]  [size]  lib32       "32-bit compatibility libraries"              on
# ports.txz       [sha256]  [size]  ports       "Ports tree"                                  on
# src.txz         [sha256]  [size]  src         "System source tree"                          off
# tests.txz       [sha256]  [size]  tests       "Test suite"                                  off

cat MANIFEST | while read _filename _sha256 _size _package _desc _enable; do
    if ! is_yes ${_install_src} && [ ${_package} = "src" ]; then
        continue
    fi

    if ! is_yes ${_install_debug} && [ ${_package} != "${_package%_dbg}" ]; then
        continue
    fi

    if ! is_yes ${_install_tests} && [ ${_package} = "tests" ]; then
        continue
    fi

    if [ ${_package} = "ports" ]; then
        continue
    fi

    if [ -f "${_filename}" ]; then
        echo "Checking ${_filename}"
        _sha256_local=$(${=CAT_CMD} "${_filename}" | sha256 -q)
    else
        _sha256_local="0"
    fi

    while [ "${_sha256}" != "${_sha256_local}" ]; do
        fetch ${_release}/${_filename}
        _sha256_local=$(sha256 -q "${_filename}")
    done
done

# optionally fetch etcupdate.tar.bz2
fetch ${_release}/etcupdate.tar.bz2 || :

if is_yes ${FETCH_ONLY}; then
    exit 0
fi

_destdir_fs=$(zfs list -H -o mounted,mountpoint,name | awk "\$1 == \"yes\" && \$2 == \"${DESTDIR}\" { print \$3; }")

if [ -n "${_destdir_fs}" ]; then
    zfs snapshot "${_destdir_fs}@$(date +%F.%H%M)"
fi

if is_yes ${BOOTENV_ENABLE}; then
    if mount | cut -w -f 3 | fgrep -q "${BOOTENV_MOUNT}"; then
        error "mount point '${BOOTENV_MOUNT}' already in use"
    fi

    bectl create ${BOOTENV_NAME}
    bectl mount ${BOOTENV_NAME} ${BOOTENV_MOUNT}

    if mount | cut -w -f 3 | fgrep -q "/usr/src"; then
        mount -t nullfs /usr/src ${BOOTENV_MOUNT}/usr/src
    fi

    if mount | cut -w -f 3 | fgrep -q "/usr/ports"; then
        mount -t nullfs /usr/ports ${BOOTENV_MOUNT}/usr/ports
    fi

    mount -t devfs devfs ${BOOTENV_MOUNT}/dev

    DESTDIR=${BOOTENV_MOUNT}
else
    if [ -z "${DESTDIR}" ]; then
        if is_yes ${_proc_mounted}; then
            umount -f /proc
        fi
    fi
fi

_srcdir=/usr/src

if [ -f ${DESTDIR}/usr/src/Makefile ]; then
    _srcdir=${DESTDIR}/usr/src
fi

etcupdate resolve -D ${DESTDIR}/

export PATH=/rescue:${PATH}

if is_yes ${_install_src}; then
    echo "Extracting: src.txz"

    for _file in ${DESTDIR}/usr/src/*; do
        rm -r -f ${_file}
    done

    # In the Zsh shell, `${=VAR_NAME}` is a parameter expansion that
    # performs word splitting on the value of `VAR_NAME`.

    # In the case of `${=CAT_CMD}`, it means that the value of `CAT_CMD`
    # will be subject to word splitting. This is often used when the value
    # of `CAT_CMD` contains multiple words or filenames separated by
    # whitespaces. The word splitting will break the value into separate
    # words, which can be useful when passing them as arguments to a
    # command.

    # For example, if `CAT_CMD` is defined as `"/bin/cat -n"`, then
    # `${=CAT_CMD}` will result in `"/bin/cat"` and `"-n"` being treated as
    # separate words, which can be useful when using the value as arguments
    # to a command or in a command substitution.

    # It's worth noting that `${=VAR_NAME}` is specific to Zsh and is not
    # available in other shells like Bash.

    ${=CAT_CMD} ${_distdir}/src.txz | tar -x -z -U -C ${DESTDIR}/ -f -
fi

if [ ! -d ${DESTDIR}/etc/rc.d ]; then
    error "missing ${DESTDIR}/etc/rc.d"
fi

find ${DESTDIR}/bin \
    ${DESTDIR}/lib \
    ${DESTDIR}/libexec \
    ${DESTDIR}/sbin \
    ${DESTDIR}/usr/bin \
    ${DESTDIR}/usr/lib \
    ${DESTDIR}/usr/lib32 \
    -flags -schg \
    -exec chflags noschg {} \;

if [ -f ${_distdir}/etcupdate.tar.bz2 ]; then
    etcupdate -F -p -D ${DESTDIR}/ -t ${_distdir}/etcupdate.tar.bz2
elif [ -f ${_srcdir}/Makefile ]; then
    etcupdate -F -p -D ${DESTDIR}/ -s ${_srcdir}
fi

cat MANIFEST | while read _filename _sha256 _size _package _desc _enable; do
    _extract="no"
    _options=()

    if ! is_yes ${_install_debug} && [ ${_package} != ${_package%_dbg} ]; then
        continue
    fi

    if ! is_yes ${_install_tests} && [ ${_package} = "tests" ]; then
        continue
    fi

    case ${_package} in
        kernel*)
            if [ -f "${DESTDIR}/boot/kernel/kernel" ]; then
                _extract="yes"
            fi
            _options+="--exclude ./usr"
            ;;

        base)
            _options+="--exclude ./.cshrc"
            _options+="--exclude ./.profile"
            _options+="--exclude ./etc"
            _options+="--exclude ./root"
            _options+="--exclude ./tmp"
            _options+="--exclude ./var"

            if ! is_yes ${_install_tests}; then
                _options+="--exclude ./usr/tests"
            fi

            _extract="yes"
            ;;

        ports) ;;

        src) ;;

        *)
            _extract="yes"
            ;;
    esac

    if is_yes ${_extract}; then
        echo "Extracting: ${_filename}"
        ${=CAT_CMD} ${_distdir}/${_filename} | tar -x -p -U -C ${DESTDIR}/ -f - ${=_options[*]}
    fi
done

if [ -f ${_distdir}/etcupdate.tar.bz2 ]; then
    echo "Running: etcupdate (tar)"
    etcupdate -F -I '*.cf' -D ${DESTDIR}/ -t ${_distdir}/etcupdate.tar.bz2
elif [ -f ${_srcdir}/Makefile ]; then
    echo "Running: etcupdate (src)"
    etcupdate -F -I '*.cf' -D ${DESTDIR}/ -s ${_srcdir}
fi

echo "Running: mtree"

mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.root.dist -p ${DESTDIR}/
mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.usr.dist -p ${DESTDIR}/usr

if is_yes ${BOOTENV_ENABLE}; then
    mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.var.dist -p /var
else
    mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.var.dist -p ${DESTDIR}/var
fi

if [ -f ${DESTDIR}/etc/mtree/BSD.lib32.dist ]; then
    if [ -d ${DESTDIR}/usr/lib32 ]; then
        mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.lib32.dist -p ${DESTDIR}/usr
    fi
fi

if [ -f ${DESTDIR}/etc/mtree/BSD.include.dist ]; then
    mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.include.dist -p ${DESTDIR}/usr/include
fi

if [ -f ${DESTDIR}/etc/mtree/BSD.sendmail.dist ]; then
    mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.sendmail.dist -p ${DESTDIR}/
fi

if [ -f ${DESTDIR}/etc/mtree/BSD.tests.dist ]; then
    if [ -d ${DESTDIR}/usr/tests ]; then
        mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.tests.dist -p ${DESTDIR}/usr/tests
    fi
fi

chroot ${DESTDIR}/ newaliases

if [ -f ${_srcdir}/Makefile ]; then
    cd ${_srcdir}

    echo "Running: delete-old"

    {
        set +o pipefail
        yes y | make delete-old DESTDIR=${DESTDIR}/ > /dev/null 2>&1
        set -o pipefail
    }

    # echo "Running: delete-old-libs"
    # yes y | make delete-old-libs DESTDIR=${DESTDIR}/ > /dev/null 2>&1
fi

if is_yes ${BOOTENV_ENABLE}; then
    if is_yes ${UPGRADE_PACKAGES}; then
        if pkg -c ${BOOTENV_MOUNT} update --repository bsdkit --force; then
            pkg -c ${BOOTENV_MOUNT} upgrade --repository bsdkit --yes pkg
            pkg -c ${BOOTENV_MOUNT} upgrade --repository bsdkit --fetch-only --yes
            env HANDLE_RC_SCRIPTS=NO pkg -c ${BOOTENV_MOUNT} upgrade --repository bsdkit --yes
        fi
    fi

    if is_yes ${REBUILD_PORTS}; then
        for _port in $(pkg which -qo /boot/modules/* | sort | uniq); do
            rebuild_port ${_port}
        done
    fi

    if mount | cut -w -f 3 | fgrep -q "${BOOTENV_MOUNT}/usr/src"; then
        umount -f ${BOOTENV_MOUNT}/usr/src
    fi

    if mount | cut -w -f 3 | fgrep -q "${BOOTENV_MOUNT}/usr/ports"; then
        umount -f ${BOOTENV_MOUNT}/usr/ports
    fi

    bectl umount -f ${BOOTENV_NAME}
    bectl activate ${BOOTENV_NAME}
    bectl list
fi

echo
echo "Upgrade complete."
echo

if [ -z "${DESTDIR}" ]; then
    _disks=$(sysctl -n kern.disks | rs 0 1 | sort | rs 1 0)
    _found="no"

    for _disk in ${(@s/ /)_disks}; do
        if gpart show ${_disk} 2>/dev/null | grep -q freebsd-zfs; then
            _found="yes"
        fi
    done

    if is_yes ${_found}; then
        echo "You may need to run these commands:"
        echo
        for _disk in ${(@s/ /)_disks}; do
            if gpart show ${_disk} 2>/dev/null | grep -q freebsd-zfs; then
                _last_sector_offset=$(expr $(sudo diskinfo /dev/${_disk} | awk '{ print $4 }') - 1)
                _index=$(gpart show ${_disk} 2>/dev/null | awk 'BEGIN { result = 1; } $4 == "freebsd-boot" { print $3; result = 0; exit; } END { exit result; }')
                echo "  sysctl -q kern.geom.debugflags=0x10"
                echo "  dd if=/dev/${_disk} of=sector.bin iseek=${_last_sector_offset}"
                echo "  gpart recover ${_disk}"
                echo "  gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i ${_index} ${_disk}"
                echo "  dd if=sector.bin of=/dev/${_disk} oseek=${_last_sector_offset}"
                echo "  sysctl -q kern.geom.debugflags=0x00"
                echo
            fi
        done
        echo "  rm sector.bin"
        echo
    fi
fi

#!/usr/bin/env zsh

setopt errreturn nounset pipefail

SCRIPT_PATH="$(dirname $(realpath $0))"
SCRIPT_NAME="$(basename $0)"

source ${SCRIPT_PATH}/../lib/system.inc.sh
source ${SCRIPT_PATH}/../lib/colors.inc.sh
source ${SCRIPT_PATH}/../lib/hr-to-bytes.inc.sh
source ${SCRIPT_PATH}/../lib/is-yes.inc.sh
source ${SCRIPT_PATH}/../lib/yaml.inc.sh

if [ "$(uname -s)" != "FreeBSD" ]; then
    error "Must be executed on FreeBSD."
    exit 1
fi

BSDKIT_PATH="$(realpath ${SCRIPT_PATH}/../)"

if [ -x /usr/local/bin/vim ]; then
    export EDITOR=/usr/local/bin/vim
fi

export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin:/usr/local/sbin

# ===========================================================================

: ${BSDKIT_ROOT_URL:="http://hub.olgeni.com/FreeBSD"}
: ${BSDKIT_VERSION:=""}
: ${BSDKIT_ARCH:="amd64"}

: ${DESTDIR:=""}
: ${BOOTENV_ENABLE:="default"}
: ${BOOTENV_NAME:="$(date +%F.%H%M)"}
: ${BOOTENV_MOUNT:="/mnt"}
: ${FETCH_ONLY:="no"}
: ${CAT_CMD:="/bin/cat"}

: ${_install_src:="no"}
: ${_install_debug:="no"}
: ${_install_tests:="no"}
: ${_proc_mounted:="no"}

_mountpoint_list=()

cleanup() {
    if is-yes ${BOOTENV_ENABLE}; then
        for ((i=${#_mountpoint_list[@]}; i>=1; i--)); do
            if ${BSDKIT_PATH}/bsdkit is-mount-point ${BOOTENV_MOUNT}${_mountpoint_list[i]}; then
                umount -f ${BOOTENV_MOUNT}${_mountpoint_list[i]}
            fi
        done

        if mount | cut -w -f 3 | fgrep -q "${BOOTENV_MOUNT}/dev"; then
            if ${BSDKIT_PATH}/bsdkit is-mount-point ${BOOTENV_MOUNT}/dev; then
                umount -f ${BOOTENV_MOUNT}/dev
            fi
        fi

        if mount | cut -w -f 3 | fgrep -q "${BOOTENV_MOUNT}"; then
            if ${BSDKIT_PATH}/bsdkit is-mount-point ${BOOTENV_MOUNT}; then
                bectl umount -f ${BOOTENV_NAME}
            fi
        fi
    else
        if [ -z "${DESTDIR}" ]; then
            if ! mount | cut -w -f 3 | fgrep -q "/proc"; then
                if is-yes ${_proc_mounted}; then
                    mount /proc
                fi
            fi
        fi
    fi
}

# Function to clean up old source files after extraction
cleanup-old-src-files() {
    local _srcdir="$1"
    local _archive="$2"

    if [ ! -d "${_srcdir}" ]; then
        return 0
    fi

    message "Cleaning up obsolete source files"

    # Get list of files in the archive
    local _archive_files=$(mktemp -t ${SCRIPT_NAME}.archive.XXXXXX)
    local _existing_files=$(mktemp -t ${SCRIPT_NAME}.existing.XXXXXX)
    local _files_to_remove=$(mktemp -t ${SCRIPT_NAME}.remove.XXXXXX)

    # List files in the archive (relative paths from usr/src)
    # The archive contains paths like usr/src/sys/... so we need to strip the prefix
    tar -tf "${_archive}" | grep '^usr/src/' | sed 's|^usr/src/||' | grep -v '/$' | grep -v '^$' | sort > ${_archive_files}

    # List existing files in src directory (relative to /usr/src)
    (cd "${_srcdir}" && find . -type f | sed 's|^\./||' | grep -v '^$' | sort) > ${_existing_files}

    # Find files to remove (in existing but not in archive)
    comm -23 ${_existing_files} ${_archive_files} > ${_files_to_remove}

    # Filter out files to preserve (BSDKIT kernel configs)
    local _filtered_files=$(mktemp -t ${SCRIPT_NAME}.filtered.XXXXXX)
    grep -v '^sys/.*/conf/BSDKIT$' ${_files_to_remove} > ${_filtered_files} || true

    # Remove obsolete files using xargs for speed
    local _count=0
    if [ -s ${_filtered_files} ]; then
        _count=$(wc -l < ${_filtered_files} | awk '{print $1}')
        (cd "${_srcdir}" && xargs -n 100 rm -f < ${_filtered_files})
    fi

    rm -f ${_filtered_files}

    if [ ${_count} -gt 0 ]; then
        message "Removed ${_count} obsolete source files"
    fi

    # Clean up empty directories
    find "${_srcdir}" -type d -empty -delete 2>/dev/null || true

    # Clean up temp files
    rm -f ${_archive_files} ${_existing_files} ${_files_to_remove} ${_filtered_files}
}

trap cleanup EXIT

# if [[ -z "${CAT_CMD+x}" ]]; then
#     if command -v pv > /dev/null 2>&1; then
#         CAT_CMD=(pv -c -w 75)
#     else
#         CAT_CMD=/bin/cat
#     fi
# fi

if mount | cut -w -f 3 | fgrep -q "/proc"; then
    _proc_mounted="yes"
fi

OPTIND=1
while getopts "a:b:d:eEFn:p:r:v:" OPT; do
    case ${OPT} in
        a)
            BSDKIT_ARCH=${OPTARG}
            ;;
        d)
            DESTDIR=${OPTARG%/}
            ;;
        e)
            BOOTENV_ENABLE="yes"
            ;;
        E)
            BOOTENV_ENABLE="no"
            ;;
        F)
            FETCH_ONLY="yes"
            ;;
        n)
            BOOTENV_NAME=${OPTARG}
            ;;
        r)
            BSDKIT_ROOT_URL=${OPTARG}
            ;;
        v)
            BSDKIT_VERSION=${OPTARG}
            ;;
        *)
            exit 64 # EX_USAGE
            ;;
    esac
done

shift $((OPTIND - 1))

if [ -d ${DESTDIR}/.base ]; then
    error "Destination directory is thin jail"
fi

if [ -z "${BSDKIT_VERSION}" ]; then
    BSDKIT_VERSION="$(get-os-version)"
    message "Using current version: ${BSDKIT_VERSION}"
fi

_security_jail_jailed="no"

if sysctl -n security.jail.jailed > /dev/null 2>&1; then
    if [ "$(sysctl -n security.jail.jailed)" = "1" ]; then
        _security_jail_jailed="yes"
        BOOTENV_ENABLE="no"
    fi
fi

if kenv -q zfs_be_root > /dev/null 2>&1; then
    if [ "${BOOTENV_ENABLE}" = "default" ]; then
        if [ -z "${DESTDIR}" ]; then
            BOOTENV_ENABLE="yes"
        else
            BOOTENV_ENABLE="no"
        fi
    fi
else
    BOOTENV_ENABLE="no"
fi

if ! is-yes ${FETCH_ONLY}; then
    if [ "${DESTDIR}" != "" ] && is-yes ${BOOTENV_ENABLE}; then
        error "incompatible BOOTENV_ENABLE and DESTDIR"
    fi

    if is-yes ${BOOTENV_ENABLE}; then
        which bectl > /dev/null 2>&1 || error "missing requirement: bectl"
    fi
fi

if [ -f ${DESTDIR}/usr/src/Makefile ]; then
    _install_src="yes"
fi

if [ -f ${DESTDIR}/usr/lib/debug/bin/sh.debug ]; then
    _install_debug="yes"
fi

if [ -f ${DESTDIR}/usr/tests/Kyuafile ]; then
    _install_tests="yes"
fi

_release=${BSDKIT_ROOT_URL}/release-${BSDKIT_VERSION}-${BSDKIT_ARCH}

_distdir=/usr/freebsd-dist/${BSDKIT_VERSION}-${BSDKIT_ARCH}

mkdir -p ${_distdir}

cd ${_distdir}

message "Fetching MANIFEST file"
fetch -q ${_release}/MANIFEST || error "Failed to fetch MANIFEST file"

message "Fetching OLDFILES file"
fetch -q ${_release}/OLDFILES || error "Failed to fetch OLDFILES file"

message "Fetching RELEASE file"
fetch -q ${_release}/RELEASE || error "Failed to fetch RELEASE file"

message "Fetching etcupdate.tar.bz2 file"
fetch -q ${_release}/etcupdate.tar.bz2 || error "Failed to fetch etcupdate.tar.bz2 file"

# base-dbg.txz    [sha256]  [size]  base_dbg    "Base system (Debugging)"                     off
# base.txz        [sha256]  [size]  base        "Base system (MANDATORY)"                     on
# doc.txz         [sha256]  [size]  doc         "Additional Documentation"                    off
# kernel-dbg.txz  [sha256]  [size]  kernel_dbg  "Kernel (Debugging)"                          off
# kernel.txz      [sha256]  [size]  kernel      "Kernel (MANDATORY)"                          on
# lib32-dbg.txz   [sha256]  [size]  lib32_dbg   "32-bit compatibility libraries (Debugging)"  off
# lib32.txz       [sha256]  [size]  lib32       "32-bit compatibility libraries"              on
# ports.txz       [sha256]  [size]  ports       "Ports tree"                                  on
# src.txz         [sha256]  [size]  src         "System source tree"                          off
# tests.txz       [sha256]  [size]  tests       "Test suite"                                  off

cat MANIFEST | while read _filename _sha256 _size _package _desc _enable; do
    if ! is-yes ${_install_src} && [ ${_package} = "src" ]; then
        continue
    fi

    if ! is-yes ${_install_debug} && [ ${_package} != "${_package%_dbg}" ]; then
        continue
    fi

    if ! is-yes ${_install_tests} && [ ${_package} = "tests" ]; then
        continue
    fi

    if [ ${_package} = "ports" ]; then
        continue
    fi

    if [ -f "${_filename}" ]; then
        message "Checking ${_filename}"
        _sha256_local=$(${=CAT_CMD} "${_filename}" | sha256 -q)
    else
        _sha256_local="0"
    fi

    while [ "${_sha256}" != "${_sha256_local}" ]; do
        fetch ${_release}/${_filename}
        _sha256_local=$(sha256 -q "${_filename}")
    done
done

if is-yes ${FETCH_ONLY}; then
    message "Release downloaded successfully"
    exit 0
fi

_destdir_fs=$(zfs list -H -o mounted,mountpoint,name | awk "\$1 == \"yes\" && \$2 == \"${DESTDIR}\" { print \$3; }")

if [ -n "${_destdir_fs}" ]; then
    zfs snapshot "${_destdir_fs}@$(date +%F.%H%M)"
fi

if is-yes ${BOOTENV_ENABLE}; then
    if mount | cut -w -f 3 | fgrep -q "${BOOTENV_MOUNT}"; then
        error "mount point '${BOOTENV_MOUNT}' already in use"
    fi

    bectl create ${BOOTENV_NAME}
    bectl mount ${BOOTENV_NAME} ${BOOTENV_MOUNT} > /dev/null 2>&1

    if mount | cut -w -f 3 | fgrep -q "/usr/src"; then
        _mountpoint_list+=("/usr/src")
    fi

    if mount | cut -w -f 3 | fgrep -q "/usr/ports"; then
        _mountpoint_list+=("/usr/ports")
    fi

    mount -p | awk '$2 ~ "^/var(/|$)" { print $2 }' | while read _mountpoint; do
        _mountpoint_list+=(${_mountpoint})
    done

    for ((i=1; i<=${#_mountpoint_list[@]}; i++)); do
        mount -t nullfs ${_mountpoint_list[i]} ${BOOTENV_MOUNT}${_mountpoint_list[i]}
    done

    mount -t devfs devfs ${BOOTENV_MOUNT}/dev

    DESTDIR=${BOOTENV_MOUNT}
else
    if [ -z "${DESTDIR}" ]; then
        if is-yes ${_proc_mounted}; then
            umount -f /proc
        fi
    fi
fi

_srcdir=/usr/src

if [ -f ${DESTDIR}/usr/src/Makefile ]; then
    _srcdir=${DESTDIR}/usr/src
fi

export PATH=/rescue:${PATH}

if [ ! -d ${DESTDIR}/etc/rc.d ]; then
    error "missing ${DESTDIR}/etc/rc.d"
fi

find \
    ${DESTDIR}/bin \
    ${DESTDIR}/lib \
    ${DESTDIR}/libexec \
    ${DESTDIR}/sbin \
    ${DESTDIR}/usr/bin \
    ${DESTDIR}/usr/lib \
    ${DESTDIR}/usr/lib32 \
    -flags -schg \
    -exec chflags noschg {} \;

if [ -f ${_distdir}/etcupdate.tar.bz2 ]; then
    etcupdate -F -p -D ${DESTDIR}/ -t ${_distdir}/etcupdate.tar.bz2
elif [ -f ${_srcdir}/Makefile ]; then
    etcupdate -F -p -D ${DESTDIR}/ -s ${_srcdir}
fi

if [ -t 0 ]; then
    etcupdate resolve -p -D ${DESTDIR}/
fi

_readonly_directory_list=(
    "bin"
    "boot"
    "lib"
    "libexec"
    "rescue"
    "sbin"
    "usr/bin"
    "usr/include"
    "usr/lib"
    "usr/lib32"
    "usr/libdata"
    "usr/libexec"
    "usr/sbin"
    "usr/share"
    "usr/src"
    "usr/tests"
)

# No longer using uarch flags for file tracking

cat MANIFEST | while read _filename _sha256 _size _package _desc _enable; do
    _extract="no"
    _options=()

    if ! is-yes ${_install_debug} && [ ${_package} != ${_package%_dbg} ]; then
        continue
    fi

    if ! is-yes ${_install_tests} && [ ${_package} = "tests" ]; then
        continue
    fi

    if ! is-yes ${_install_src} && [ ${_package} = "src" ]; then
        continue
    fi

    case ${_package} in
        kernel*)
            if [ -f "${DESTDIR}/boot/kernel/kernel" ]; then
                _extract="yes"
            fi
            _options+="--exclude ./usr"
            ;;

        base)
            _options+="--exclude ./.cshrc"
            _options+="--exclude ./.profile"
            _options+="--exclude ./etc"
            _options+="--exclude ./root"
            _options+="--exclude ./tmp"
            _options+="--exclude ./var"

            if ! is-yes ${_install_tests}; then
                _options+="--exclude ./usr/tests"
            fi

            _extract="yes"
            ;;

        ports) ;;

        src)
            _options+="--no-same-owner"
            _extract="yes"
            ;;

        *)
            _extract="yes"
            ;;
    esac

    if is-yes ${_extract}; then
        message "Extracting ${_filename}"

        # In the Zsh shell, `${=VAR_NAME}` is a parameter expansion that
        # performs word splitting on the value of `VAR_NAME`.

        local _stderr_log=$(mktemp -t ${SCRIPT_NAME}.XXXXXX)

        local _attempt_limit=2
        local _attempt_count=0

        while [ ${_attempt_count} -lt ${_attempt_limit} ]; do
            if ${=CAT_CMD} ${_distdir}/${_filename} | tar -x -p -U -C ${DESTDIR}/ -f - ${=_options[*]} 2> ${_stderr_log}; then
                break
            else
                warning "Failed to extract ${_filename}, retrying"
                cat ${_stderr_log}

                # Sample error: "/usr/src/sys/contrib/openzfs/cmd/zvol_wait: Could not unlink"
                local _target

                grep "Could not unlink" ${_stderr_log} | awk -F ": " '{print $1}' | while read -r _target; do
                    warning "Removing ${_target} due to 'Could not unlink' error"
                    rm -r -f ${DESTDIR}/${_target}
                done

                _attempt_count=$(( _attempt_count + 1 ))
                continue
            fi
        done

        if [ ${_attempt_count} -eq ${_attempt_limit} ]; then
            error "Failed to extract ${_filename} after ${_attempt_limit} attempts"
        fi

        rm -f ${_stderr_log}

        # Clean up obsolete source files after extraction
        if [ ${_package} = "src" ] && [ -d ${DESTDIR}/usr/src ]; then
            cleanup-old-src-files ${DESTDIR}/usr/src ${_distdir}/${_filename}
        fi
    fi
done

if [ -f ${_distdir}/etcupdate.tar.bz2 ]; then
    message "Running etcupdate (tar)"
    etcupdate -F -I '*.cf' -D ${DESTDIR}/ -t ${_distdir}/etcupdate.tar.bz2
elif [ -f ${_srcdir}/Makefile ]; then
    message "Running etcupdate (src)"
    etcupdate -F -I '*.cf' -D ${DESTDIR}/ -s ${_srcdir}
fi

if [ -t 0 ]; then
    etcupdate resolve -D ${DESTDIR}/
fi

# Obsolete file removal now handled differently

message "Running mtree"

if [ -f ${DESTDIR}/etc/mtree/BSD.root.dist ]; then
    mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.root.dist -p ${DESTDIR}/
fi

if [ -f ${DESTDIR}/etc/mtree/BSD.usr.dist ]; then
    mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.usr.dist -p ${DESTDIR}/usr
fi

if [ -f ${DESTDIR}/etc/mtree/BSD.var.dist ]; then
    mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.var.dist -p ${DESTDIR}/var
fi

if [ -f ${DESTDIR}/etc/mtree/BSD.sendmail.dist ]; then
    mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.sendmail.dist -p ${DESTDIR}/
fi

if [ -f ${DESTDIR}/etc/mtree/BSD.lib32.dist ]; then
    if [ -d ${DESTDIR}/usr/lib32 ]; then
        mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.lib32.dist -p ${DESTDIR}/usr
    fi
fi

if [ -f ${DESTDIR}/etc/mtree/BSD.include.dist ]; then
    if [ -d ${DESTDIR}/usr/include ]; then
        mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.include.dist -p ${DESTDIR}/usr/include
    fi
fi

if [ -f ${DESTDIR}/etc/mtree/BSD.tests.dist ]; then
    if [ -d ${DESTDIR}/usr/tests ]; then
        mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.tests.dist -p ${DESTDIR}/usr/tests
    fi
fi

if [ -f ${DESTDIR}/etc/mtree/BSD.debug.dist ]; then
    if [ -d ${DESTDIR}/usr/lib/debug ]; then
        mtree -ideU -N ${DESTDIR}/etc -f ${DESTDIR}/etc/mtree/BSD.debug.dist -p ${DESTDIR}/usr/lib
    fi
fi

message "Running newaliases"
chroot ${DESTDIR}/ newaliases

# Remove obsolete mixer state files when upgrading to FreeBSD 14.
for _file in ${DESTDIR}/var/db/mixer*-state(N); do
    # Content is like "vol 75:75 pcm 75:75..."
    if awk 'NR == 1 && $1 == "vol" { exit 0; } END { exit 1; }' ${_file} > /dev/null 2>&1; then
        warning "Removing obsolete mixer state file: ${_file}"
        rm -f ${_file}
    fi
done

if is-yes ${BOOTENV_ENABLE}; then
    for ((i=${#_mountpoint_list[@]}; i>=1; i--)); do
        if ${BSDKIT_PATH}/bsdkit is-mount-point ${BOOTENV_MOUNT}${_mountpoint_list[i]}; then
            umount -f ${BOOTENV_MOUNT}${_mountpoint_list[i]}
        fi
    done

    bectl umount -f ${BOOTENV_NAME}
    bectl activate ${BOOTENV_NAME}
    bectl list
fi

message "Upgrade complete."

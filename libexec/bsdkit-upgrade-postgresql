#!/usr/bin/env zsh

setopt errreturn nounset pipefail

SCRIPT_PATH="$(dirname $(realpath $0))"
SCRIPT_NAME="$(basename $0)"

source ${SCRIPT_PATH}/colors.inc

if [ "$(uname -s)" != "FreeBSD" ]; then
    error "Must be executed on FreeBSD."
    exit 1
fi

BSDKIT_PATH="$(realpath ${SCRIPT_PATH}/../)"

# ===========================================================================

usage() {
    echo "Usage: ${SCRIPT_NAME} -s <source version> -t <target version>"
    exit 0
}

zparseopts -F -D -E -a _opts -A _opts_args \
    s:=SOURCE_VERSION_OPTION \
    t:=TARGET_VERSION_OPTION

SOURCE_VERSION=${SOURCE_VERSION_OPTION[2]}
TARGET_VERSION=${TARGET_VERSION_OPTION[2]}

if [ -z ${SOURCE_VERSION+x} ]; then
    usage
fi

if [ -z ${TARGET_VERSION+x} ]; then
    usage
fi

if [ "${SOURCE_VERSION}" = "${TARGET_VERSION}" ]; then
    error "Source version and target version are the same."
fi

message "Upgrading PostgreSQL from ${SOURCE_VERSION} to ${TARGET_VERSION}"

export POSTGRES_USER=postgres

export PGPREFIX_SOURCE=/tmp/postgresql${SOURCE_VERSION}-server
export PGPREFIX_TARGET=/tmp/postgresql${TARGET_VERSION}-server

if [ -e ${PGPREFIX_SOURCE} ]; then
    rm -r -f ${PGPREFIX_SOURCE}
fi

if [ -e ${PGPREFIX_TARGET} ]; then
    rm -r -f ${PGPREFIX_TARGET}
fi

export SOURCE_BINDIR=${PGPREFIX_SOURCE}/usr/local/bin
export TARGET_BINDIR=${PGPREFIX_TARGET}/usr/local/bin

export SOURCE_LIBDIR=${PGPREFIX_SOURCE}/usr/local/lib
export TARGET_LIBDIR=${PGPREFIX_TARGET}/usr/local/lib

export PGHOME=/var/db/postgres

export SOURCE_PGDATA=${PGHOME}/data${SOURCE_VERSION}
export TARGET_PGDATA=${PGHOME}/data${TARGET_VERSION}

if [ ! -d ${SOURCE_PGDATA} ]; then
    error "Source data directory does not exist"
fi

if [ -e ${TARGET_PGDATA} ]; then
    error "Target data directory already exists"
fi

message "Fetching packages for version ${SOURCE_VERSION} (server)"
pkg fetch -y -o /tmp/ postgresql${SOURCE_VERSION}-server > /dev/null 2>&1
message "Fetching packages for version ${SOURCE_VERSION} (contrib)"
pkg fetch -y -o /tmp/ postgresql${SOURCE_VERSION}-contrib > /dev/null 2>&1
message "Fetching packages for version ${SOURCE_VERSION} (client)"
pkg fetch -y -o /tmp/ postgresql${SOURCE_VERSION}-client > /dev/null 2>&1

message "Fetching packages for version ${TARGET_VERSION} (server)"
pkg fetch -y -o /tmp/ postgresql${TARGET_VERSION}-server > /dev/null 2>&1
message "Fetching packages for version ${TARGET_VERSION} (contrib)"
pkg fetch -y -o /tmp/ postgresql${TARGET_VERSION}-contrib > /dev/null 2>&1
message "Fetching packages for version ${TARGET_VERSION} (client)"
pkg fetch -y -o /tmp/ postgresql${TARGET_VERSION}-client > /dev/null 2>&1

message "Extracting packages for version ${SOURCE_VERSION}"
mkdir -p ${PGPREFIX_SOURCE}
tar -x -f /tmp/All/postgresql${SOURCE_VERSION}-server* -C ${PGPREFIX_SOURCE} > /dev/null 2>&1
tar -x -f /tmp/All/postgresql${SOURCE_VERSION}-contrib* -C ${PGPREFIX_SOURCE} > /dev/null 2>&1
tar -x -f /tmp/All/postgresql${SOURCE_VERSION}-client* -C ${PGPREFIX_SOURCE} > /dev/null 2>&1

message "Extracting packages for version ${TARGET_VERSION}"
mkdir -p ${PGPREFIX_TARGET}
tar -x -f /tmp/All/postgresql${TARGET_VERSION}-server* -C ${PGPREFIX_TARGET} > /dev/null 2>&1
tar -x -f /tmp/All/postgresql${TARGET_VERSION}-contrib* -C ${PGPREFIX_TARGET} > /dev/null 2>&1
tar -x -f /tmp/All/postgresql${TARGET_VERSION}-client* -C ${PGPREFIX_TARGET} > /dev/null 2>&1

message "Fetching remaining packages"
pkg upgrade --yes --fetch-only
pkg upgrade --yes --fetch-only --glob postgresql\*

if ! ${SOURCE_BINDIR}/psql --username=${POSTGRES_USER} --tuples-only --command "SHOW lc_collate" template1 > /dev/null 2>&1; then
    su ${POSTGRES_USER} -c "cd ~${POSTGRES_USER} && ${SOURCE_BINDIR}/pg_ctl start -D ${SOURCE_PGDATA}"
fi

message "Dumping database to ~/dump.sql"
env ${TARGET_BINDIR}/pg_dumpall -U ${POSTGRES_USER} > ~/dump.sql

# to restart the old cluster:
# su ${POSTGRES_USER} -c "cd ~${POSTGRES_USER} && ${SOURCE_BINDIR}/pg_ctl stop -D ${SOURCE_PGDATA}" || :
# su ${POSTGRES_USER} -c "cd ~${POSTGRES_USER} && ${SOURCE_BINDIR}/pg_ctl start -D ${SOURCE_PGDATA}" || :

_initdb_flags=()

_lc_collate=$(${SOURCE_BINDIR}/psql --username=${POSTGRES_USER} --tuples-only --command "SHOW lc_collate" template1)
_lc_ctype=$(${SOURCE_BINDIR}/psql --username=${POSTGRES_USER} --tuples-only --command "SHOW lc_ctype" template1)
_encoding=$(${SOURCE_BINDIR}/psql --username=${POSTGRES_USER} --tuples-only --command "SHOW server_encoding" template1)

_lc_collate=${_lc_collate// /}
_lc_ctype=${_lc_ctype// /}
_encoding=${_encoding// /}

_initdb_flags+=("--lc-collate=${_lc_collate}")
_initdb_flags+=("--lc-ctype=${_lc_ctype}")
_initdb_flags+=("--encoding=${_encoding}")

message "Initializing new database"
su ${POSTGRES_USER} -c "cd ~${POSTGRES_USER} && ${TARGET_BINDIR}/initdb ${_initdb_flags} --pgdata ${TARGET_PGDATA} --username ${POSTGRES_USER}"

if [ -f ${SOURCE_PGDATA}/pg_hba.conf ]; then
    message "Copying pg_hba.conf"
    cp -p -v ${SOURCE_PGDATA}/pg_hba.conf ${TARGET_PGDATA}/pg_hba.conf
fi

if [ -f ${SOURCE_PGDATA}/postgresql.auto.conf ]; then
    message "Copying postgresql.auto.conf"
    cp -p -v ${SOURCE_PGDATA}/postgresql.auto.conf ${TARGET_PGDATA}/postgresql.auto.conf
fi

_options=(
    "--old-bindir=${SOURCE_BINDIR}"
    "--new-bindir=${TARGET_BINDIR}"
    "--old-datadir=${SOURCE_PGDATA}"
    "--new-datadir=${TARGET_PGDATA}"
    "--link"
    "--username=${POSTGRES_USER}"
)

message "Checking cluster compatibility"
su postgres -c "cd ~${POSTGRES_USER} && ${TARGET_BINDIR}/pg_upgrade ${_options} --check"

message "Stopping database"
su ${POSTGRES_USER} -c "cd ~${POSTGRES_USER} && ${SOURCE_BINDIR}/pg_ctl stop -D ${SOURCE_PGDATA}" || :

message "Upgrading cluster"
su postgres -c "cd ~${POSTGRES_USER} && ${TARGET_BINDIR}/pg_upgrade ${_options}"

rm -f -v /tmp/.s.PGSQL.*(N)

_is_source_contrib_installed=$(pkg query -g %n "postgresql${SOURCE_VERSION}-contrib" || :)

for _package in $(pkg query -g %n "postgresql${SOURCE_VERSION}-*"); do
    message "Changing name of ${_package} to postgresql${TARGET_VERSION}${_package#postgresql${SOURCE_VERSION}}"
    pkg set -y --change-name ${_package}:postgresql${TARGET_VERSION}${_package#postgresql${SOURCE_VERSION}}
done

message "Upgrading packages"
pkg upgrade --yes --glob postgresql\*

_is_target_contrib_installed=$(pkg query -g %n "postgresql${TARGET_VERSION}-contrib" || :)

if [ -n "${_is_source_contrib_installed}" ] && [ -z "${_is_target_contrib_installed}" ]; then
    message "Installing contrib"
    pkg install --yes postgresql${TARGET_VERSION}-contrib
fi

message "Starting database"
service postgresql onestart

if [ -f /var/db/postgres/update_extensions.sql ]; then
    su postgres -c "cd ~postgres && psql < /var/db/postgres/update_extensions.sql"
fi

message "Running vacuumdb"
su postgres -c "cd ~postgres && vacuumdb --all --analyze-in-stages"

message "Removing helper files"
rm -f ~postgres/analyze_new_cluster.sh
rm -f ~postgres/delete_old_cluster.sh
rm -f ~postgres/update_extensions.sql

rm -f ~postgres/pg_upgrade_internal.log
rm -f ~postgres/pg_upgrade_server.log
rm -f ~postgres/pg_upgrade_utility.log

message "Removing temporary files"
rm -r -f ${PGPREFIX_SOURCE}
rm -r -f ${PGPREFIX_TARGET}

message "Previous data is available in ${SOURCE_PGDATA}."

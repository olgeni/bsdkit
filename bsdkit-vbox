#!/usr/bin/env zsh

set -e -u -o pipefail

SCRIPT_PATH="$(dirname $(realpath $0))"
SCRIPT_NAME="$(basename $0)"

error() {
    echo "[${SCRIPT_NAME}] $*" >&2
    exit 1
}

which nc > /dev/null 2>&1 || error 'nc not found'

: ${BSDKIT_VBOX_NAME:="bsdkit"}
: ${BSDKIT_VBOX_MEMORY:="2048"}
: ${BSDKIT_VBOX_VRAM:="16"}
: ${BSDKIT_VBOX_SSH_PORT:="2200"}
: ${BSDKIT_VBOX_VNC_PORT:="5910"}
: ${BSDKIT_VBOX_VNC_PASSWORD:="bsdkit"}
: ${BSDKIT_VBOX_GUI_TYPE:="separate"}
: ${BSDKIT_VBOX_ISO:=""}
: ${BSDKIT_VBOX_EFI:=""}
: ${BSDKIT_VBOX_DISK_SIZE:="30000"}
: ${BSDKIT_LAST_DISK="3"}
: ${BSDKIT_LAST_DISK_LIMIT="8"}

IDE_CONTROLLER_NAME="IDE Controller"
SATA_CONTROLLER_NAME="SATA Controller"
VIRTIO_CONTROLLER_NAME="VirtIO Controller"

perform_create() {
    [ -f "${BSDKIT_VBOX_ISO}" ] || error "ISO file does not exist."

    if VBoxManage showvminfo ${BSDKIT_VBOX_NAME} --machinereadable > /dev/null 2>&1; then
        VBoxManage unregistervm --delete ${BSDKIT_VBOX_NAME}
    fi

    VBoxManage createvm --name ${BSDKIT_VBOX_NAME} --ostype FreeBSD_64 --register

    VBoxManage modifyvm ${BSDKIT_VBOX_NAME} \
        --vrdeproperty "TCP/Ports=${BSDKIT_VBOX_VNC_PORT}" \
        --vrdeproperty "VNCPassword=${BSDKIT_VBOX_VNC_PASSWORD}" \
        --vrde on

    VBoxManage modifyvm ${BSDKIT_VBOX_NAME} \
               --memory ${BSDKIT_VBOX_MEMORY} \
               --vram ${BSDKIT_VBOX_VRAM} \
               --keyboard usb \
               --mouse usbtablet

    if [ -n "${BSDKIT_VBOX_EFI}" ]; then
        # bios|efi|efi32|efi64
        VBoxManage modifyvm ${BSDKIT_VBOX_NAME} --firmware efi
    fi

    VBoxManage storagectl ${BSDKIT_VBOX_NAME} --name ${IDE_CONTROLLER_NAME} --add ide --hostiocache on
    VBoxManage storagectl ${BSDKIT_VBOX_NAME} --name ${SATA_CONTROLLER_NAME} --add sata --hostiocache on
    VBoxManage storagectl ${BSDKIT_VBOX_NAME} --name ${VIRTIO_CONTROLLER_NAME} --add virtio --hostiocache on

    _vm_path=$(dirname "$(VBoxManage showvminfo ${BSDKIT_VBOX_NAME} --machinereadable | grep "^CfgFile=" | sed -e 's/.*="//' -e 's/"$//')")

    local _sata_port
    _sata_port=0

    for _i in $(seq 0 ${BSDKIT_LAST_DISK})
    do
        VBoxManage createmedium disk \
                   --size ${BSDKIT_VBOX_DISK_SIZE} \
                   --format VDI \
                   --filename "${_vm_path}/${BSDKIT_VBOX_NAME}-${_i}.vdi"

        VBoxManage storageattach ${BSDKIT_VBOX_NAME} \
                   --storagectl ${VIRTIO_CONTROLLER_NAME} \
                   --port ${_sata_port} \
                   --device 0 \
                   --type hdd \
                   --medium "${_vm_path}/${BSDKIT_VBOX_NAME}-${_i}.vdi"

        _sata_port=$((_sata_port + 1))
    done

    # VBoxManage modifyvm ${BSDKIT_VBOX_NAME} --nic1 bridged --bridgeadapter1 re0
    # VBoxManage modifyvm ${BSDKIT_VBOX_NAME} --natpf1 delete ssh

    VBoxManage modifyvm ${BSDKIT_VBOX_NAME} \
               --natpf1 ssh,tcp,,${BSDKIT_VBOX_SSH_PORT},,22

    VBoxManage storageattach ${BSDKIT_VBOX_NAME} \
        --storagectl ${IDE_CONTROLLER_NAME} \
        --port 0 \
        --device 0 \
        --type dvddrive \
        --medium "${BSDKIT_VBOX_ISO}"
}

perform_start() {
    VBoxManage startvm --type ${BSDKIT_VBOX_GUI_TYPE} ${BSDKIT_VBOX_NAME}

    while ! nc -w 1 localhost ${BSDKIT_VBOX_SSH_PORT} | grep SSH > /dev/null 2>&1
    do
        sleep 1
    done
}

perform_stop() {
    if VBoxManage showvminfo ${BSDKIT_VBOX_NAME} > /dev/null 2>&1; then
        VBoxManage controlvm ${BSDKIT_VBOX_NAME} acpipowerbutton || :

        local _timeout=10

        SECONDS=0

        while VBoxManage showvminfo ${BSDKIT_VBOX_NAME} --machinereadable | fgrep 'VMState="running"' > /dev/null 2>&1; do
            if [ ${SECONDS} -ge ${_timeout} ]; then
                VBoxManage controlvm ${BSDKIT_VBOX_NAME} poweroff || :
                break
            fi
            sleep 1
        done

        while ! VBoxManage storageattach ${BSDKIT_VBOX_NAME} \
                --storagectl ${IDE_CONTROLLER_NAME} \
                --port 0 \
                --device 0 \
                --medium emptydrive \
                > /dev/null 2>&1
        do
            echo "perform_stop: waiting for emptydrive"
            sleep 1
        done
    fi
}

perform_poweroff() {
    if VBoxManage showvminfo ${BSDKIT_VBOX_NAME} > /dev/null 2>&1; then
        VBoxManage controlvm ${BSDKIT_VBOX_NAME} poweroff || :

        sleep 1

        while VBoxManage showvminfo ${BSDKIT_VBOX_NAME} --machinereadable | fgrep 'VMState="running"' > /dev/null 2>&1
        do
            sleep 1
        done

        while ! VBoxManage storageattach ${BSDKIT_VBOX_NAME} \
                --storagectl ${IDE_CONTROLLER_NAME} \
                --port 0 \
                --device 0 \
                --medium emptydrive \
                > /dev/null 2>&1
        do
            echo "perform_poweroff: waiting for emptydrive"
            sleep 1
        done
    fi
}

perform_destroy() {
    if VBoxManage showvminfo ${BSDKIT_VBOX_NAME} > /dev/null 2>&1; then
        perform_purge

        _vm_path=$(dirname "$(VBoxManage showvminfo ${BSDKIT_VBOX_NAME} --machinereadable | grep "^CfgFile=" | sed -e 's/.*="//' -e 's/"$//')")

        local _sata_port
        _sata_port=0

        for _i in $(seq 0 ${BSDKIT_LAST_DISK_LIMIT})
        do
            VBoxManage storageattach ${BSDKIT_VBOX_NAME} \
                       --storagectl ${VIRTIO_CONTROLLER_NAME} \
                       --port ${_sata_port} \
                       --device 0 \
                       --type hdd \
                       --medium none >/dev/null 2>&1 || :

            VBoxManage closemedium disk "${_vm_path}/${BSDKIT_VBOX_NAME}-${_i}.vdi" --delete >/dev/null 2>&1 || :

            rm -f "${_vm_path}/${BSDKIT_VBOX_NAME}-${_i}.vdi"

            _sata_port=$((_sata_port + 1))
        done

        VBoxManage unregistervm --delete ${BSDKIT_VBOX_NAME}

        rm -r -f "${_vm_path}/Logs"
    fi
}

get_last_snapshot_name() {
    VBoxManage snapshot ${BSDKIT_VBOX_NAME} list | awk '/Name:/ { print $2 }' | tail -n 1
}

perform_take_snapshot() {
    VBoxManage snapshot ${BSDKIT_VBOX_NAME} take "$(date +%Y%m%d-%H%M%S)"
}

perform_delete_snapshot() {
    local _last_snapshot_name=$(get_last_snapshot_name)

    VBoxManage snapshot ${BSDKIT_VBOX_NAME} delete ${_last_snapshot_name}
}

perform_restore_snapshot() {
    local _last_snapshot_name=$(get_last_snapshot_name)

    VBoxManage snapshot ${BSDKIT_VBOX_NAME} restore ${_last_snapshot_name}
}

perform_list_snapshots() {
    VBoxManage snapshot ${BSDKIT_VBOX_NAME} list
}

perform_purge() {
    if [ "$(VBoxManage snapshot ${BSDKIT_VBOX_NAME} list | grep -v 'snapshots' | wc -l)" -gt 0 ]; then
        VBoxManage snapshot ${BSDKIT_VBOX_NAME} list \
            | sed -E 's/.*UUID: (.*)\).*/\1/' \
            | gtac \
            | xargs -n1 -t VBoxManage snapshot ${BSDKIT_VBOX_NAME} delete
    fi
}

perform_remote_exec() {
    ./bsdkit remote_exec -h localhost -p ${BSDKIT_VBOX_SSH_PORT} $@
}

perform_remote_deploy() {
    ./bsdkit remote_exec -h localhost -p ${BSDKIT_VBOX_SSH_PORT} deploy $@
}

perform_shell() {
    _key=$(mktemp /tmp/XXXXXX)
    ./bsdkit echo_bsdkit_private_key > ${_key}
    ssh -i ${_key} -p ${BSDKIT_VBOX_SSH_PORT} root@localhost
    rm -f ${_key}
}

perform_sync_vm() {
    _key=$(mktemp /tmp/XXXXXX)
    ./bsdkit echo_bsdkit_private_key > ${_key}
    rsync -a -v --delete -e "ssh -i ${_key} -p ${BSDKIT_VBOX_SSH_PORT}" . root@localhost:/root/bsdkit/
    rm -f ${_key}
}

perform_logcat() {
    _key=$(mktemp /tmp/XXXXXX)
    ./bsdkit echo_bsdkit_private_key > ${_key}
    env -u SSH_AUTH_SOCK ssh -i ${_key} -p ${BSDKIT_VBOX_SSH_PORT} root@localhost cat /tmp/bsdkit.log
    rm -f ${_key}
}

perform_logtail() {
    _key=$(mktemp /tmp/XXXXXX)
    ./bsdkit echo_bsdkit_private_key > ${_key}
    env -u SSH_AUTH_SOCK ssh -i ${_key} -p ${BSDKIT_VBOX_SSH_PORT} root@localhost tail -F /tmp/bsdkit.log
    rm -f ${_key}
}

OPTIND=1
while getopts "i:p:e" OPT
do
    case ${OPT} in
        i)
            BSDKIT_VBOX_ISO="${OPTARG}"
            ;;
        p)
            BSDKIT_VBOX_SSH_PORT="${OPTARG}"
            ;;
        e)
            BSDKIT_VBOX_EFI="yes"
            ;;
        *)
            return 1
            ;;
    esac
done

shift $((OPTIND - 1))

[ $# -ge 1 ] || error 'nothing to do'

_command=$1

shift

case ${_command} in
    create)
        perform_create
        ;;

    start)
        perform_start
        ;;

    stop)
        perform_stop
        ;;

    poweroff)
        perform_poweroff
        ;;

    destroy)
        perform_destroy
        ;;

    take-snapshot)
        perform_take_snapshot
        ;;

    delete-snapshot)
        perform_delete_snapshot
        ;;

    restore-snapshot)
        perform_restore_snapshot
        ;;

    list-snapshots)
        perform_list_snapshots
        ;;

    purge)
        perform_purge
        ;;

    remote_exec)
        perform_remote_exec $@
        ;;

    remote_deploy)
        perform_remote_deploy $@
        ;;

    shell)
        perform_shell
        ;;

    sync_vm)
        perform_sync_vm
        ;;

    logcat)
        perform_logcat
        ;;

    logtail)
        perform_logtail
        ;;

    *) ;;
esac

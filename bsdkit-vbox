#!/bin/sh

set -e -u

error() {
    echo "$(basename $0): $@"
    exit 1
}

: ${BSDKIT_VBOX_NAME:="bsdkit"}
: ${BSDKIT_VBOX_MEMORY:="2048"}
: ${BSDKIT_VBOX_VRAM:="16"}
: ${BSDKIT_VBOX_SSH_PORT:="2200"}
: ${BSDKIT_VBOX_VNC_PORT:="5910"}
: ${BSDKIT_VBOX_VNC_PASSWORD:="bsdkit"}
: ${BSDKIT_VBOX_ISO:=""}
: ${BSDKIT_VBOX_EFI:=""}
: ${BSDKIT_VBOX_DISK_SIZE:="30000"}

create_vm() {
    [ -f "${BSDKIT_VBOX_ISO}" ] || error "ISO file does not exist."

    if VBoxManage showvminfo ${BSDKIT_VBOX_NAME} --machinereadable > /dev/null 2>&1; then
        VBoxManage unregistervm --delete ${BSDKIT_VBOX_NAME}
    fi

    VBoxManage createvm --name ${BSDKIT_VBOX_NAME} --ostype FreeBSD_64 --register

    VBoxManage modifyvm ${BSDKIT_VBOX_NAME} \
               --vrdeproperty "TCP/Ports=${BSDKIT_VBOX_VNC_PORT}" \
               --vrdeproperty "VNCPassword=${BSDKIT_VBOX_VNC_PASSWORD}" \
               --vrde on

    VBoxManage modifyvm ${BSDKIT_VBOX_NAME} --memory ${BSDKIT_VBOX_MEMORY}
    VBoxManage modifyvm ${BSDKIT_VBOX_NAME} --vram ${BSDKIT_VBOX_VRAM}

    VBoxManage modifyvm ${BSDKIT_VBOX_NAME} --keyboard usb
    VBoxManage modifyvm ${BSDKIT_VBOX_NAME} --mouse usbtablet

    if [ -n "${BSDKIT_VBOX_EFI}" ]; then
        # bios|efi|efi32|efi64
        VBoxManage modifyvm ${BSDKIT_VBOX_NAME} --firmware efi
    fi

    VBoxManage storagectl ${BSDKIT_VBOX_NAME} --name "SATA Controller" --add sata --hostiocache on
    VBoxManage storagectl ${BSDKIT_VBOX_NAME} --name "IDE Controller" --add ide --hostiocache on

    _vm_path=$(dirname "$(VBoxManage showvminfo ${BSDKIT_VBOX_NAME} --machinereadable | grep "^CfgFile=" | sed -e 's/.*="//' -e 's/"$//')")

    for _i in $(seq 0 2); do
        VBoxManage createhd --size ${BSDKIT_VBOX_DISK_SIZE} --format VDI \
                   --filename "${_vm_path}/${BSDKIT_VBOX_NAME}-${_i}.vdi"

        VBoxManage storageattach ${BSDKIT_VBOX_NAME} \
                   --storagectl "SATA Controller" --port 0 --device 0 --type hdd \
                   --medium "${_vm_path}/${BSDKIT_VBOX_NAME}-${_i}.vdi"
    done

    # VBoxManage modifyvm ${BSDKIT_VBOX_NAME} --nic1 bridged --bridgeadapter1 re0
    # VBoxManage modifyvm ${BSDKIT_VBOX_NAME} --natpf1 delete ssh

    VBoxManage modifyvm ${BSDKIT_VBOX_NAME} --natpf1 ssh,tcp,,${BSDKIT_VBOX_SSH_PORT},,22

    VBoxManage storageattach ${BSDKIT_VBOX_NAME} \
        --storagectl "SATA Controller" \
        --port 4 \
        --device 0 \
        --type dvddrive \
        --medium "${BSDKIT_VBOX_ISO}"
}

while getopts "i:p:e" OPT; do
    case ${OPT} in
        i)
            BSDKIT_VBOX_ISO="${OPTARG}"
            ;;
        p)
            BSDKIT_VBOX_SSH_PORT="${OPTARG}"
            ;;
        e)
            BSDKIT_VBOX_EFI="yes"
            ;;
        *)
            return 1
            ;;
    esac
done

shift $((OPTIND - 1))

case $1 in
    create)
        create_vm
        ;;

    start)
        VBoxManage startvm --type gui ${BSDKIT_VBOX_NAME}
        while ! nc -w 1 localhost ${BSDKIT_VBOX_SSH_PORT} | grep SSH > /dev/null 2>&1; do
            sleep 1
        done
        ;;

    remote_deploy)
        shift
        eval ./bsdkit remote_deploy -h localhost -p ${BSDKIT_VBOX_SSH_PORT} $@
        ;;

    shell)
        _key=$(mktemp /tmp/XXXXXX)
        ./bsdkit echo_bsdkit_private_key > ${_key}
        ssh -i ${_key} -p ${BSDKIT_VBOX_SSH_PORT} root@localhost
        rm -f ${_key}
        ;;

    logcat)
        _key=$(mktemp /tmp/XXXXXX)
        ./bsdkit echo_bsdkit_private_key > ${_key}
        env -u SSH_AUTH_SOCK ssh -i ${_key} -p ${BSDKIT_VBOX_SSH_PORT} root@localhost cat /tmp/bsdkit.log
        rm -f ${_key}
        ;;

    logtail)
        _key=$(mktemp /tmp/XXXXXX)
        ./bsdkit echo_bsdkit_private_key > ${_key}
        env -u SSH_AUTH_SOCK ssh -i ${_key} -p ${BSDKIT_VBOX_SSH_PORT} root@localhost tail -F /tmp/bsdkit.log
        rm -f ${_key}
        ;;

    stop)
        VBoxManage controlvm ${BSDKIT_VBOX_NAME} acpipowerbutton || :
        while VBoxManage showvminfo ${BSDKIT_VBOX_NAME} --machinereadable | fgrep 'VMState="running"' > /dev/null 2>&1; do
            sleep 1
        done
        while ! VBoxManage storageattach ${BSDKIT_VBOX_NAME} --storagectl "SATA Controller" --port 4 --device 0 --medium emptydrive > /dev/null 2>&1; do
            sleep 1
        done
        ;;

    poweroff)
        VBoxManage controlvm ${BSDKIT_VBOX_NAME} poweroff || :
        while VBoxManage showvminfo ${BSDKIT_VBOX_NAME} --machinereadable | fgrep 'VMState="running"' > /dev/null 2>&1; do
            sleep 1
        done
        while ! VBoxManage storageattach ${BSDKIT_VBOX_NAME} --storagectl "SATA Controller" --port 4 --device 0 --medium emptydrive > /dev/null 2>&1; do
            sleep 1
        done
        ;;

    destroy)
        VBoxManage unregistervm --delete ${BSDKIT_VBOX_NAME}
        ;;
    *) ;;
esac

---
- name: Install packages
  community.general.pkgng:
    name:
      - textproc/jq
    state: present

- name: Register kenv smbios.system.product
  command:
    cmd: kenv smbios.system.product
  changed_when: false
  ignore_errors: true
  register: kenv_smbios_system_product

- name: Register kenv smbios.bios.vendor
  command:
    cmd: kenv smbios.bios.vendor
  changed_when: false
  ignore_errors: true
  register: kenv_smbios_bios_vendor

- name: Register freebsd_major
  shell:
    cmd: |
      set -o pipefail
      echo "{{ ansible_distribution_release }}" | sed -E 's/([0-9]+).*/\1/;'
  register: freebsd_major
  changed_when: false

- name: Register security.jail.jailed
  shell:
    cmd: |
      set -o pipefail
      sysctl -n security.jail.jailed
  changed_when: false
  register: sysctl_security_jail_jailed

- name: Set security_jail_jailed
  set_fact:
    security_jail_jailed: "{{ sysctl_security_jail_jailed.stdout == '1' }}"

- name: Set bsdkit defaults
  set_fact:
    default_bsdkit_root_url: https://hub.olgeni.com/FreeBSD
    default_bsdkit_version: "13.1"
    default_bsdkit_arch: amd64
    default_bsdkit_tree: default
    default_bsdkit_pkgset: nox11
    default_bsdkit_chroot: false

- name: Set bsdkit variables
  set_fact:
    bsdkit_interface: "{{ lookup('env', 'BSDKIT_INTERFACE') }}"
    bsdkit_ifconfig: "{{ lookup('env', 'BSDKIT_IFCONFIG') }}"
    bsdkit_defaultrouter: "{{ lookup('env', 'BSDKIT_DEFAULTROUTER') }}"
    bsdkit_ssh_public_key: "{{ lookup('env', 'BSDKIT_SSH_PUBLIC_KEY') }}"
    bsdkit_jail_proxy: "{{ lookup('env', 'BSDKIT_JAIL_PROXY') }}"
    bsdkit_root_url: "{{ lookup('env', 'BSDKIT_ROOT_URL') | default(default_bsdkit_root_url, True) }}"
    bsdkit_version: "{{ lookup('env', 'BSDKIT_VERSION') | default(default_bsdkit_version, True) }}"
    bsdkit_arch: "{{ lookup('env', 'BSDKIT_ARCH') | default(default_bsdkit_arch, True) }}"
    bsdkit_tree: "{{ lookup('env', 'BSDKIT_TREE') | default(default_bsdkit_tree, True) }}"
    bsdkit_pkgset: "{{ lookup('env', 'BSDKIT_PKGSET') | default(default_bsdkit_pkgset, True) }}"
    bsdkit_chroot: "{{ (lookup('env', 'BSDKIT_CHROOT') | default(default_bsdkit_chroot, False)) | bool }}"

- name: Set is_host_install
  set_fact:
    is_host_install: "{{ not security_jail_jailed }}"

- name: Set is_jail_install
  set_fact:
    is_jail_install: "{{ security_jail_jailed }}"

- name: Set is_chroot_install
  set_fact:
    is_chroot_install: "{{ bsdkit_chroot }}"

- name: Register uname -K
  command:
    cmd: |
      uname -K
  register: uname_k_output
  changed_when: false

- name: Set uname_k
  set_fact:
    uname_k: "{{ uname_k_output.stdout }}"

- name: Set zfs_compression (default)
  set_fact:
    zfs_compression: lz4

- name: Set zfs_compression (zstd)
  when: uname_k | int > 1300000
  set_fact:
    zfs_compression: zstd

- name: Check ZFS boot pool
  shell:
    cmd: |
      set -o pipefail
      zpool get -H -o name,value bootfs | awk '$2 != "-" { print $1 }'
  register: zpool_get_bootfs
  changed_when: false
  ignore_errors: true

- name: Set zfs_available
  set_fact:
    zfs_available: "{{ ((zpool_get_bootfs is succeeded) and (zpool_get_bootfs.stdout | length > 0)) | bool }}"

- name: Set boot_pool
  when: zfs_available
  set_fact:
    boot_pool: "{{ zpool_get_bootfs.stdout }}"

- name: Set platform_is_digitalocean
  set_fact:
    platform_is_digitalocean: "{{ (is_host_install | bool) and (kenv_smbios_system_product.stdout in ['Droplet']) }}"

- name: Set platform_is_virtualbox
  set_fact:
    platform_is_virtualbox: "{{ kenv_smbios_system_product.stdout == 'VirtualBox' }}"

- name: Set platform_is_vmware
  set_fact:
    platform_is_vmware: "{{ kenv_smbios_system_product.stdout == 'VMware Virtual Platform' }}"

- name: Register netstat output
  shell:
    cmd: |
      set -o pipefail
      netstat --libxo json -n -r
  register: netstat_r_output
  changed_when: false

- name: Register gateway information
  shell:
    cmd: |
      set -o pipefail
      cat << EOF | jq -r '.["statistics"]["route-information"]["route-table"]["rt-family"][] | select(.["address-family"] == "Internet") | .["rt-entry"][] | select(.["destination"] == "default") | { interface: .["interface-name"], address: .["gateway"] }'
      {{ netstat_r_output.stdout }}
      EOF
  register: gateway_data_result
  changed_when: false

- name: Set gateway_data
  set_fact:
    gateway_data: "{{ gateway_data_result.stdout | from_json }}"

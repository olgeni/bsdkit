---
- name: Assert ownership and permissions of '/root'
  file:
    path: /root
    state: directory
    owner: root
    group: wheel
    mode: "0755"

- name: Assert ownership and permissions of '/root/.ssh'
  file:
    path: /root/.ssh
    state: directory
    owner: root
    group: wheel
    mode: "0755"

- name: Check if '/root/.ssh/authorized_keys' exists
  stat:
    path: /root/.ssh/authorized_keys
  register: authorized_keys_stat

- name: Assert ownership and permissions of '/root/.ssh/authorized_keys'
  file:
    path: /root/.ssh/authorized_keys
    owner: root
    group: wheel
    mode: "0600"
  when: authorized_keys_stat.stat.exists

- name: Check if '/root/.ssh/know_hosts' exists
  stat:
    path: /root/.ssh/know_hosts
  register: know_hosts_stat

- name: Assert ownership and permissions of '/root/.ssh/know_hosts'
  file:
    path: /root/.ssh/know_hosts
    owner: root
    group: wheel
    mode: "0600"
  when: know_hosts_stat.stat.exists

- name: Find all '/root/.ssh/id_*.pub' files and register their names
  find:
    paths: /root/.ssh
    patterns: "id_*.pub"
  register: ssh_public_keys

- name: For all '/root/.ssh/id_*.pub' files, assert ownership and permissions
  file:
    path: "{{ item }}"
    state: file
    owner: root
    group: wheel
    mode: "0644"
  loop: "{{ ssh_public_keys.files | map(attribute='path') | list }}"

- name: Check if 'id_rsa' exists
  stat:
    path: /root/.ssh/id_rsa
  register: id_rsa_stat

- name: Set 'id_rsa' permissions
  file:
    path: /root/.ssh/id_rsa
    mode: "0600"
  when: id_rsa_stat.stat.exists

- name: Check if 'id_ed25519' exists
  stat:
    path: /root/.ssh/id_ed25519
  register: id_ed25519_stat

- name: Set 'id_ed25519' permissions
  file:
    path: /root/.ssh/id_ed25519
    mode: "0600"
  when: id_ed25519_stat.stat.exists

- name: Check if 'id_ecdsa' exists
  stat:
    path: /root/.ssh/id_ecdsa
  register: id_ecdsa_stat

- name: Set 'id_ecdsa' permissions
  file:
    path: /root/.ssh/id_ecdsa
    mode: "0600"
  when: id_ecdsa_stat.stat.exists

- name: Check if 'id_dsa' exists
  stat:
    path: /root/.ssh/id_dsa
  register: id_dsa_stat

- name: Set 'id_dsa' permissions
  file:
    path: /root/.ssh/id_dsa
    mode: "0600"
  when: id_dsa_stat.stat.exists

- name: Set 'UseDNS no' in /etc/ssh/sshd_config
  lineinfile:
    dest: /etc/ssh/sshd_config
    line: UseDNS no
    regexp: ^UseDNS
    insertafter: EOF
    validate: /usr/sbin/sshd -t -f %s
  # notify: restart_sshd

- name: Set 'PermitRootLogin without-password' in /etc/ssh/sshd_config
  lineinfile:
    dest: /etc/ssh/sshd_config
    line: PermitRootLogin without-password
    regexp: ^PermitRootLogin
    insertafter: EOF
    validate: /usr/sbin/sshd -t -f %s
  # notify: restart_sshd

- name: Set 'PermitUserEnvironment yes' in /etc/ssh/sshd_config
  lineinfile:
    dest: /etc/ssh/sshd_config
    line: PermitUserEnvironment yes
    regexp: ^PermitUserEnvironment
    insertafter: EOF
    validate: /usr/sbin/sshd -t -f %s
  # notify: restart_sshd

- name: Set 'AcceptEnv' block in /etc/ssh/sshd_config
  blockinfile:
    dest: /etc/ssh/sshd_config
    block: |
      AcceptEnv GITHUB_*
      AcceptEnv GITLAB_*
      AcceptEnv OPENAI_API_KEY
    marker: "# {mark} ANSIBLE MANAGED BLOCK (AcceptEnv)"
    validate: /usr/sbin/sshd -t -f %s
  # notify: restart_sshd

- name: Create SSH directory for root
  file:
    path: /root/.ssh
    state: directory
    owner: root
    group: wheel
    mode: "0755"

- name: Create SSH identity for root
  community.crypto.openssh_keypair:
    path: /root/.ssh/id_ed25519
    comment: root@{{ ansible_hostname }}
    type: ed25519
    owner: root
    group: wheel

- name: Set authorized_key
  when: bsdkit_ssh_public_key | length > 0
  ansible.posix.authorized_key:
    user: root
    key: "{{ bsdkit_ssh_public_key }}"

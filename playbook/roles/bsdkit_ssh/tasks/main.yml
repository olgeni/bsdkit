---
- name: Assert ownership and permissions of '/root'
  file:
    path: /root
    state: directory
    owner: root
    group: wheel
    mode: "0750"

- name: Assert ownership and permissions of '/root/.ssh'
  file:
    path: /root/.ssh
    state: directory
    owner: root
    group: wheel
    mode: "0755"

- name: Check if '/root/.ssh/authorized_keys' exists
  stat:
    path: /root/.ssh/authorized_keys
  register: authorized_keys_stat

- name: Assert ownership and permissions of '/root/.ssh/authorized_keys'
  file:
    path: /root/.ssh/authorized_keys
    owner: root
    group: wheel
    mode: "0600"
  when: authorized_keys_stat.stat.exists

- name: Check if '/root/.ssh/know_hosts' exists
  stat:
    path: /root/.ssh/know_hosts
  register: know_hosts_stat

- name: Assert ownership and permissions of '/root/.ssh/know_hosts'
  file:
    path: /root/.ssh/know_hosts
    owner: root
    group: wheel
    mode: "0600"
  when: know_hosts_stat.stat.exists

- name: Find all '/root/.ssh/id_*.pub' files and register their names
  find:
    paths: /root/.ssh
    patterns: "id_*.pub"
  register: ssh_public_keys

- name: For all '/root/.ssh/id_*.pub' files, assert ownership and permissions
  file:
    path: "{{ item }}"
    state: file
    owner: root
    group: wheel
    mode: "0644"
  loop: "{{ ssh_public_keys.files | map(attribute='path') | list }}"

- name: Check if 'id_rsa' exists
  stat:
    path: /root/.ssh/id_rsa
  register: id_rsa_stat

- name: Set 'id_rsa' permissions
  file:
    path: /root/.ssh/id_rsa
    mode: "0600"
  when: id_rsa_stat.stat.exists

- name: Check if 'id_ed25519' exists
  stat:
    path: /root/.ssh/id_ed25519
  register: id_ed25519_stat

- name: Set 'id_ed25519' permissions
  file:
    path: /root/.ssh/id_ed25519
    mode: "0600"
  when: id_ed25519_stat.stat.exists

- name: Check if 'id_ecdsa' exists
  stat:
    path: /root/.ssh/id_ecdsa
  register: id_ecdsa_stat

- name: Set 'id_ecdsa' permissions
  file:
    path: /root/.ssh/id_ecdsa
    mode: "0600"
  when: id_ecdsa_stat.stat.exists

- name: Remove 'id_dsa' if it exists
  file:
    path: /root/.ssh/id_dsa
    state: absent

- name: Remove 'id_dsa.pub' if it exists
  file:
    path: /root/.ssh/id_dsa.pub
    state: absent

- name: Check if /etc/ssh/ssh_host_ecdsa_key.pub exists
  stat:
    path: /etc/ssh/ssh_host_ecdsa_key.pub
  register: ssh_host_ecdsa_key_pub_stat

- name: Check if /etc/ssh/ssh_host_ed25519_key.pub exists
  stat:
    path: /etc/ssh/ssh_host_ed25519_key.pub
  register: ssh_host_ed25519_key_pub_stat

- name: Check if /etc/ssh/ssh_host_rsa_key.pub exists
  stat:
    path: /etc/ssh/ssh_host_rsa_key.pub
  register: ssh_host_rsa_key_pub_stat

- name: Generate SSH host keys
  command:
    cmd: service sshd keygen
  when: >
    (
      not ssh_host_ecdsa_key_pub_stat.stat.exists
      or not ssh_host_ed25519_key_pub_stat.stat.exists
      or not ssh_host_rsa_key_pub_stat.stat.exists
    )

- name: Remove DSA host keys if they exist
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/ssh/ssh_host_dsa_key
    - /etc/ssh/ssh_host_dsa_key.pub

- name: Remove 'UseDNS', 'PermitRootLogin', and 'PermitUserEnvironment' from /etc/ssh/sshd_config
  when: "'# BEGIN ANSIBLE MANAGED BLOCK (Settings)' not in lookup('file', '/etc/ssh/sshd_config')"
  block:
    - name: Remove 'UseDNS' from /etc/ssh/sshd_config
      lineinfile:
        dest: /etc/ssh/sshd_config
        state: absent
        regexp: ^UseDNS
        validate: /usr/sbin/sshd -t -f %s
      notify: restart_sshd

    - name: Remove 'PermitRootLogin' from /etc/ssh/sshd_config
      lineinfile:
        dest: /etc/ssh/sshd_config
        state: absent
        regexp: ^PermitRootLogin
        validate: /usr/sbin/sshd -t -f %s
      notify: restart_sshd

    - name: Remove 'PermitUserEnvironment' from /etc/ssh/sshd_config
      lineinfile:
        dest: /etc/ssh/sshd_config
        state: absent
        regexp: ^PermitUserEnvironment
        validate: /usr/sbin/sshd -t -f %s
      notify: restart_sshd

- name: Set 'Settings' block in /etc/ssh/sshd_config
  blockinfile:
    dest: /etc/ssh/sshd_config
    block: |
      UseDNS no
      PermitRootLogin without-password
      PermitUserEnvironment yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK (Settings)"
    validate: /usr/sbin/sshd -t -f %s
  notify: restart_sshd

- name: Set 'AcceptEnv' block in /etc/ssh/sshd_config
  blockinfile:
    dest: /etc/ssh/sshd_config
    block: |
      AcceptEnv GITHUB_*
      AcceptEnv GITLAB_*
      AcceptEnv NPM_*
      AcceptEnv ANTHROPIC_API_KEY
      AcceptEnv DEEPSEEK_API_KEY
      AcceptEnv OPENAI_API_KEY
    marker: "# {mark} ANSIBLE MANAGED BLOCK (AcceptEnv)"
    validate: /usr/sbin/sshd -t -f %s
  notify: restart_sshd

# /etc/pam.d/sshd:
# - auth		required	pam_unix.so		no_warn try_first_pass
# ---
# + auth		required	pam_unix.so		no_warn try_first_pass
# + auth		required	/usr/local/lib/pam_google_authenticator.so

# TOOD: add support for Google authenticator
# AuthenticationMethods publickey,keyboard-interactive:pam

- name: Create SSH directory for root
  file:
    path: /root/.ssh
    state: directory
    owner: root
    group: wheel
    mode: "0755"

- name: Create SSH identity for root
  community.crypto.openssh_keypair:
    path: /root/.ssh/id_ed25519
    comment: root@{{ ansible_hostname }}
    type: ed25519
    owner: root
    group: wheel

- name: Set authorized_key
  when: bsdkit_ssh_public_key | length > 0
  ansible.posix.authorized_key:
    user: root
    key: "{{ bsdkit_ssh_public_key }}"

---
- hosts: all
  user: root
  gather_facts: no
  tasks:
    - raw: /usr/bin/env http_proxy="{{lookup('env', 'JAIL_PROXY')}}" pkg install -y python

- hosts: all
  user: root
  tasks:
    - name: "Retrieve freebsd_branch"
      set_fact: freebsd_branch={{ansible_distribution_release.split("-")[1]}}

    - name: "Retrieve freebsd_version (checking for stable)"
      set_fact: freebsd_version={{ansible_distribution_release.split(".")[0]}}
      when: freebsd_branch == "STABLE"

    - name: "Retrieve freebsd_version (checking for release)"
      set_fact: freebsd_version={{ansible_distribution_release.split("-")[0]}}
      when: freebsd_branch == "RELEASE" or freebsd_branch == "PRERELEASE" or freebsd_branch[:4] == "BETA" or freebsd_branch[:2] == "RC"

    - name: "set_fact: ssh_public_key"
      set_fact: ssh_public_key="{{lookup('env', 'SSH_PUBLIC_KEY')}}"

    - name: "set_fact: bsdkit_interface"
      set_fact: bsdkit_interface="{{lookup('env', 'BSDKIT_INTERFACE')}}"

    - name: "set_fact: bsdkit_ifconfig"
      set_fact: bsdkit_ifconfig="{{lookup('env', 'BSDKIT_IFCONFIG')}}"

    - name: "set_fact: bsdkit_defaultrouter"
      set_fact: bsdkit_defaultrouter="{{lookup('env', 'BSDKIT_DEFAULTROUTER')}}"

    - name: "set_fact: jail_proxy"
      set_fact: jail_proxy="{{lookup('env', 'JAIL_PROXY')}}"

    - name: "set_fact: install_jail"
      set_fact: install_jail="{{lookup('env', 'INSTALL_JAIL')}}"

    - name: "stat: /usr/src/sys"
      stat: path=/usr/src/sys
      register: stat_usr_src_sys

    - name: "Set authorized_key"
      authorized_key: user=root key="{{ssh_public_key}}"
      when: ssh_public_key != ""

    - name: "Create /usr/local/etc"
      file: >
        path=/usr/local/etc state=directory
        owner=root group=wheel mode=755

    - name: "Create /usr/local/etc/sv"
      file: >
        path=/usr/local/etc/sv state=directory
        owner=root group=wheel mode=755

    - name: "Create /var/service"
      file: >
        path=/var/service state=directory
        owner=root group=wheel mode=755

    - name: "Install kernel configuration"
      copy: >
        src=../ansible/BSDKIT-{{freebsd_version}}-{{ansible_architecture}}
        dest=/usr/src/sys/{{ansible_architecture}}/conf/BSDKIT
        owner=root group=wheel mode=644
      when: stat_usr_src_sys.stat.exists
      failed_when: False

    - name: "Install configuration files in /etc"
      copy: >
        src=../ansible/{{item}} dest=/etc/{{item}}
        owner=root group=wheel mode=644
      with_items:
        - csh.cshrc
        - make.conf
        - periodic.conf
        - src.conf

    - name: "Gather zfs_enable"
      command: sysrc -n zfs_enable
      register: sysrc_zfs_enable
      when: not install_jail

    - name: "Install /etc/rc.conf (host version)"
      copy: >
        src=../ansible/rc.conf dest=/etc/rc.conf
        owner=root group=wheel mode=644
      when: not install_jail

    - name: "Install /etc/rc.conf (jail version)"
      copy: >
        src=../ansible/rc.conf.jail dest=/etc/rc.conf
        owner=root group=wheel mode=644
      when: install_jail

    - name: "Set zfs_enable in rc.conf"
      command: sysrc zfs_enable="{{sysrc_zfs_enable.stdout}}"
      when: not install_jail and sysrc_zfs_enable is success

    - name: "Set ifconfig in rc.conf"
      command: sysrc ifconfig_{{bsdkit_interface}}="{{bsdkit_ifconfig}}"
      when: (bsdkit_interface != "") and (bsdkit_ifconfig != "")

    - name: "Set defaultrouter in rc.conf"
      command: sysrc defaultrouter="{{bsdkit_defaultrouter}}"
      when: bsdkit_defaultrouter != ""

    - name: "Set http_proxy in pkg.conf"
      lineinfile: >
        dest=/usr/local/etc/pkg.conf
        line="pkg_env: { http_proxy: \"{{jail_proxy}}\" }"
        regexp="^pkg_env"
        insertafter=EOF
      when: jail_proxy != ""

    - name: "Install sysctl.conf"
      copy: >
        src=../ansible/{{item}} dest=/etc/{{item}}
        owner=root group=wheel mode=644
      with_items:
        - sysctl.conf
      when: not install_jail

    - name: "Install loader.conf"
      copy: >
        src=../ansible/{{item}} dest=/boot/{{item}}
        owner=root group=wheel mode=644
      with_items:
        - loader.conf
      when: not install_jail

    - name: "Install dotfiles in /usr/share/skel"
      copy: >
        src=../ansible/dot.{{item}} dest=/usr/share/skel/dot.{{item}}
        owner=root group=wheel mode=644
      with_items:
        - inputrc
        - kermrc
        - vimrc
        - zshrc
      failed_when: False

    - name: "Install dotfiles in /root"
      copy: >
        src=../ansible/dot.{{item}} dest=/root/.{{item}}
        owner=root group=wheel mode=644
      with_items:
        - inputrc
        - kermrc
        - vimrc
        - zshrc

    - name: "Install sudoers"
      copy: >
        src=../ansible/sudoers dest=/usr/local/etc/sudoers
        owner=root group=wheel mode=440

    - name: "Create /etc/newsyslog.conf.d/"
      file: >
        path=/etc/newsyslog.conf.d/ state=directory
        owner=root group=wheel mode=755

    - name: "Install newsyslog.conf"
      copy: >
        src=../ansible/newsyslog.conf dest=/etc/newsyslog.conf.d/newsyslog.conf
        owner=root group=wheel mode=644

    - name: "Install /etc/firewall"
      copy: >
        src=../ansible/firewall dest=/etc/firewall
        owner=root group=wheel mode=644
      when: not install_jail

    - name: "Install /usr/local/etc/smartd.conf"
      copy: >
        src=../ansible/smartd.conf dest=/usr/local/etc/smartd.conf
        owner=root group=wheel mode=644
      when: not install_jail

    - name: "Install /usr/local/etc/portmaster.rc"
      copy: >
        src=../ansible/portmaster.rc dest=/usr/local/etc/portmaster.rc
        owner=root group=wheel mode=644

    - name: "Set 'UseDNS no' in /etc/ssh/sshd_config"
      lineinfile: >
        dest=/etc/ssh/sshd_config
        line="UseDNS no"
        regexp="^UseDNS"
        insertafter=EOF

    - name: "Set 'PermitRootLogin without-password' in /etc/ssh/sshd_config"
      lineinfile: >
        dest=/etc/ssh/sshd_config
        line="PermitRootLogin without-password"
        regexp="^PermitRootLogin"
        insertafter=EOF

    - name: "Configure /etc/devfs.conf"
      lineinfile: >
        dest=/etc/devfs.conf
        regexp="^{{item}}"
        state=absent
      with_items:
        - ".*devstat"
        - ".*fuse.*"
      when: not install_jail

    - name: "stat: /var/db/zoneinfo"
      stat: path=/var/db/zoneinfo
      register: stat_zoneinfo

    - name: "Run tzsetup"
      command: tzsetup Europe/Rome
      when: not stat_zoneinfo.stat.exists

    - name: "Set 'MAILTO' in /etc/crontab"
      lineinfile: >
        dest=/etc/crontab
        line="MAILTO=\"\""
        regexp="^MAILTO"
        insertafter="^SHELL="

    - name: "Disable '/dev/console' in /etc/syslog.conf"
      lineinfile: >
        dest=/etc/syslog.conf
        regexp="/dev/console$"
        state=absent

    - name: "Create /var/ftp"
      file: >
        path=/var/ftp state=directory
        owner=root group=wheel mode=755

    - name: "Add FTP user"
      lineinfile: >
        dest=/etc/master.passwd
        line="ftp:*:14:14::0:0:Anonymous FTP Admin:/var/ftp:/nonexistent"
        regexp="^ftp:"
        insertafter="^man:"
      notify: pwd_mkdb

    - name: "Create /etc/ssl/certs"
      file: >
        path=/etc/ssl/certs state=directory
        owner=root group=wheel mode=755

    - name: "Install base packages"
      pkgng: name={{item}} state=present
      with_items:
        - align
        - beadm
        - ca_root_nss
        - cpdup
        - curl
        - diff-so-fancy
        - gnu-watch
        - inplace
        - lftp
        - rsync
        - socat
        - sudo
        - the_silver_searcher
        - tmux
        - vim
        - zsh

    - name: "stat: ca-root-nss.crt"
      stat: path=/usr/local/share/certs/ca-root-nss.crt
      register: stat_ca_root_nss

    - name: "stat: cert.pem"
      stat: path=/etc/ssl/cert.pem
      register: stat_cert_pem

    - name: "Install ca-root-nss.crt"
      copy: >
        src=/usr/local/share/certs/ca-root-nss.crt
        dest=/etc/ssl/cert.pem
        owner=root group=wheel mode=644
      when: stat_ca_root_nss.stat.exists and not stat_cert_pem.stat.exists

    - name: "Run pkg clean"
      shell: pkg clean -a -y || true
      changed_when: false

  handlers:
    - name: pwd_mkdb
      command: pwd_mkdb /etc/master.passwd

- import_playbook: virt.yml
  when: not install_jail

- hosts: all
  user: root
  gather_facts: no
  tasks:
    - raw: rm -r -f .ansible

- hosts: all
  user: root
  gather_facts: no
  tasks:
    - name: "Remove authorized_key"
      authorized_key: user=root key="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDUde1HTbCcpmEsgtFUJZKYmrIxK+MMAAZEr0lCY1KRZOIxG75561r78kxHprU9144rMtp/2GjJJjfDoIweXh+YKnRKVj3ADPw5WHS93dJVK5vHGGv+fF1tdXlbyO29gQwwqrWbPmqvshbc9F2AOPWHmV0CuqYpZ6Sk0EzvBCVmx52uZE9Nbr19dBBk885xWVNH4U4NHuEYUhbxgcaaCtGjsJy/+wgUqCTJp6xavB73Pf207yI8ZnMzfaje0EMN2vDrupntDon3lgtpc2VFntF1DQwn0BSGD1IW1xyokdbEIPt2hCt03cbi3G/7Pl7oaVZLfctNYE7j9ooruZEZ/ovN bsdkit" state=absent

- name: "facts: kenv smbios.system.product"
  command:
    cmd: kenv smbios.system.product
  changed_when: no
  ignore_errors: yes
  register: kenv_smbios_system_product

- name: "facts: debug kenv_smbios_system_product"
  debug:
    var: kenv_smbios_system_product

- name: "facts: kenv smbios.bios.vendor"
  command:
    cmd: kenv smbios.bios.vendor
  changed_when: no
  ignore_errors: yes
  register: kenv_smbios_bios_vendor

- name: "facts: debug kenv_smbios_bios_vendor"
  debug:
    var: kenv_smbios_bios_vendor

- name: "facts: retrieve freebsd_major"
  shell:
    cmd: |
      set -o pipefail
      echo "{{ ansible_distribution_release }}" | sed -E 's/([0-9]+).*/\1/;'
  register: freebsd_major
  changed_when: no

- name: "facts: debug freebsd_major"
  debug:
    var: freebsd_major

- name: "facts: check sysctl: security.jail.jailed"
  shell:
    cmd: |
      set -o pipefail
      sysctl -n security.jail.jailed
  changed_when: no
  ignore_errors: yes
  register: sysctl_security_jail_jailed

- name: "facts: debug sysctl_security_jail_jailed"
  debug:
    var: sysctl_security_jail_jailed

- name: "facts: set_fact (security_jail_jailed)"
  set_fact:
    security_jail_jailed: "{{ sysctl_security_jail_jailed.stdout == '0' }}"

- name: "facts: set_fact (bsdkit defaults)"
  set_fact:
    default_bsdkit_root_url: "https://hub.olgeni.com/FreeBSD"
    default_bsdkit_version: "13.0"
    default_bsdkit_arch: "amd64"
    default_bsdkit_tree: "default"
    default_bsdkit_pkgset: "nox11"

- name: "facts: set_fact (bsdkit variables)"
  set_fact:
    bsdkit_interface: "{{ lookup('env', 'BSDKIT_INTERFACE') }}"
    bsdkit_ifconfig: "{{ lookup('env', 'BSDKIT_IFCONFIG') }}"
    bsdkit_defaultrouter: "{{ lookup('env', 'BSDKIT_DEFAULTROUTER') }}"
    bsdkit_ssh_public_key: "{{ lookup('env', 'BSDKIT_SSH_PUBLIC_KEY') }}"
    bsdkit_jail_proxy: "{{ lookup('env', 'BSDKIT_JAIL_PROXY') }}"
    bsdkit_root_url: "{{ lookup('env', 'BSDKIT_ROOT_URL') | default(default_bsdkit_root_url, True) }}"
    bsdkit_version: "{{ lookup('env', 'BSDKIT_VERSION') | default(default_bsdkit_version, True) }}"
    bsdkit_arch: "{{ lookup('env', 'BSDKIT_ARCH') | default(default_bsdkit_arch, True) }}"
    bsdkit_tree: "{{ lookup('env', 'BSDKIT_TREE') | default(default_bsdkit_tree, True) }}"
    bsdkit_pkgset: "{{ lookup('env', 'BSDKIT_PKGSET') | default(default_bsdkit_pkgset, True) }}"
    is_host_install: "{{ security_jail_jailed }}"

- name: "facts: debug bsdkit_interface"
  debug:
    var: bsdkit_interface

- name: "facts: debug bsdkit_ifconfig"
  debug:
    var: bsdkit_ifconfig

- name: "facts: debug bsdkit_defaultrouter"
  debug:
    var: bsdkit_defaultrouter

- name: "facts: debug bsdkit_ssh_public_key"
  debug:
    var: bsdkit_ssh_public_key

- name: "facts: debug bsdkit_jail_proxy"
  debug:
    var: bsdkit_jail_proxy

- name: "facts: debug bsdkit_root_url"
  debug:
    var: bsdkit_root_url

- name: "facts: debug bsdkit_version"
  debug:
    var: bsdkit_version

- name: "facts: debug bsdkit_arch"
  debug:
    var: bsdkit_arch

- name: "facts: debug bsdkit_tree"
  debug:
    var: bsdkit_tree

- name: "facts: debug bsdkit_pkgset"
  debug:
    var: bsdkit_pkgset

- name: "facts: debug is_host_install"
  debug:
    var: is_host_install

- name: "facts: check ZFS boot pool"
  shell:
    cmd: |
      set -o pipefail
      zpool get -H -o name,value bootfs | awk '$2 != "-" { print $1 }'
  register: zpool_get_bootfs
  changed_when: no
  ignore_errors: yes

- name: "facts: debug zpool_get_bootfs"
  debug:
    var: zpool_get_bootfs

- name: "facts: set_fact zfs_enabled"
  set_fact:
    zfs_enabled: "{{ ((zpool_get_bootfs is succeeded) and (zpool_get_bootfs.stdout | length > 0)) | bool }}"

- name: "facts: debug zfs_enabled"
  debug:
    var: zfs_enabled

- name: "facts: set_fact boot_pool"
  set_fact:
    boot_pool: "{{ zpool_get_bootfs.stdout }}"
    when: zfs_enabled | bool

- name: "facts: debug boot_pool"
  debug:
    var: boot_pool

- name: "facts: set_fact platform_is_digitalocean"
  set_fact:
    platform_is_digitalocean: "{{ (is_host_install | bool) and (kenv_smbios_system_product.stdout in ['Droplet']) }}"

- name: "facts: debug platform_is_digitalocean"
  debug:
    var: platform_is_digitalocean

- name: "facts: set_fact platform_is_virtualbox"
  set_fact:
    platform_is_virtualbox: "{{ kenv_smbios_system_product.stdout == 'VirtualBox' }}"

- name: "facts: set_fact platform_is_vmware"
  set_fact:
    platform_is_vmware: "{{ kenv_smbios_system_product.stdout == 'VMware Virtual Platform' }}"
